//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/Collections.java
//

#ifndef _JavaUtilCollections_H_
#define _JavaUtilCollections_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/RandomAccess.h"
#include "java/util/Set.h"
#include "java/util/SortedMap.h"
#include "java/util/SortedSet.h"

@class IOSClass;
@class IOSObjectArray;
@class JavaUtilArrayList;
@class JavaUtilRandom;
@protocol JavaLangComparable;
@protocol JavaUtilComparator;
@protocol JavaUtilDeque;
@protocol JavaUtilEnumeration;
@protocol JavaUtilIterator;
@protocol JavaUtilListIterator;
@protocol JavaUtilQueue;

@interface JavaUtilCollections : NSObject

#pragma mark Public

+ (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c
                       withNSObjectArray:(IOSObjectArray *)a;

+ (id<JavaUtilQueue>)asLifoQueueWithJavaUtilDeque:(id<JavaUtilDeque>)deque;

+ (jint)binarySearchWithJavaUtilList:(id<JavaUtilList>)list
                              withId:(id)object;

+ (jint)binarySearchWithJavaUtilList:(id<JavaUtilList>)list
                              withId:(id)object
              withJavaUtilComparator:(id<JavaUtilComparator>)comparator;

+ (id<JavaUtilCollection>)checkedCollectionWithJavaUtilCollection:(id<JavaUtilCollection>)c
                                                     withIOSClass:(IOSClass *)type;

+ (id<JavaUtilList>)checkedListWithJavaUtilList:(id<JavaUtilList>)list
                                   withIOSClass:(IOSClass *)type;

+ (id<JavaUtilMap>)checkedMapWithJavaUtilMap:(id<JavaUtilMap>)m
                                withIOSClass:(IOSClass *)keyType
                                withIOSClass:(IOSClass *)valueType;

+ (id<JavaUtilSet>)checkedSetWithJavaUtilSet:(id<JavaUtilSet>)s
                                withIOSClass:(IOSClass *)type;

+ (id<JavaUtilSortedMap>)checkedSortedMapWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)m
                                                  withIOSClass:(IOSClass *)keyType
                                                  withIOSClass:(IOSClass *)valueType;

+ (id<JavaUtilSortedSet>)checkedSortedSetWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)s
                                                  withIOSClass:(IOSClass *)type;

+ (void)copy__WithJavaUtilList:(id<JavaUtilList>)destination
              withJavaUtilList:(id<JavaUtilList>)source OBJC_METHOD_FAMILY_NONE;

+ (jboolean)disjointWithJavaUtilCollection:(id<JavaUtilCollection>)c1
                    withJavaUtilCollection:(id<JavaUtilCollection>)c2;

+ (id<JavaUtilEnumeration>)emptyEnumeration;

+ (id<JavaUtilIterator>)emptyIterator;

+ (id<JavaUtilList>)emptyList;

+ (id<JavaUtilListIterator>)emptyListIterator;

+ (id<JavaUtilMap>)emptyMap;

+ (id<JavaUtilSet>)emptySet;

+ (id<JavaUtilEnumeration>)enumerationWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

+ (void)fillWithJavaUtilList:(id<JavaUtilList>)list
                      withId:(id)object;

+ (jint)frequencyWithJavaUtilCollection:(id<JavaUtilCollection>)c
                                 withId:(id)o;

+ (jint)indexOfSubListWithJavaUtilList:(id<JavaUtilList>)list
                      withJavaUtilList:(id<JavaUtilList>)sublist;

+ (jint)lastIndexOfSubListWithJavaUtilList:(id<JavaUtilList>)list
                          withJavaUtilList:(id<JavaUtilList>)sublist;

+ (JavaUtilArrayList *)listWithJavaUtilEnumeration:(id<JavaUtilEnumeration>)enumeration;

+ (id)maxWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

+ (id)maxWithJavaUtilCollection:(id<JavaUtilCollection>)collection
         withJavaUtilComparator:(id<JavaUtilComparator>)comparator;

+ (id)minWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

+ (id)minWithJavaUtilCollection:(id<JavaUtilCollection>)collection
         withJavaUtilComparator:(id<JavaUtilComparator>)comparator;

+ (id<JavaUtilList>)nCopiesWithInt:(jint)length
                            withId:(id)object;

+ (id<JavaUtilSet>)newSetFromMapWithJavaUtilMap:(id<JavaUtilMap>)map OBJC_METHOD_FAMILY_NONE;

+ (jboolean)replaceAllWithJavaUtilList:(id<JavaUtilList>)list
                                withId:(id)obj
                                withId:(id)obj2;

+ (void)reverseWithJavaUtilList:(id<JavaUtilList>)list;

+ (id<JavaUtilComparator>)reverseOrder;

+ (id<JavaUtilComparator>)reverseOrderWithJavaUtilComparator:(id<JavaUtilComparator>)c;

+ (void)rotateWithJavaUtilList:(id<JavaUtilList>)lst
                       withInt:(jint)dist;

+ (jint)roundUpToPowerOfTwoWithInt:(jint)i;

+ (jint)secondaryHashWithId:(id)key;

+ (jint)secondaryIdentityHashWithId:(id)key;

+ (void)shuffleWithJavaUtilList:(id<JavaUtilList>)list;

+ (void)shuffleWithJavaUtilList:(id<JavaUtilList>)list
             withJavaUtilRandom:(JavaUtilRandom *)random;

+ (id<JavaUtilSet>)singletonWithId:(id)object;

+ (id<JavaUtilList>)singletonListWithId:(id)object;

+ (id<JavaUtilMap>)singletonMapWithId:(id)key
                               withId:(id)value;

+ (void)sortWithJavaUtilList:(id<JavaUtilList>)list;

+ (void)sortWithJavaUtilList:(id<JavaUtilList>)list
      withJavaUtilComparator:(id<JavaUtilComparator>)comparator;

+ (void)swapWithJavaUtilList:(id<JavaUtilList>)list
                     withInt:(jint)index1
                     withInt:(jint)index2;

+ (id<JavaUtilCollection>)synchronizedCollectionWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

+ (id<JavaUtilList>)synchronizedListWithJavaUtilList:(id<JavaUtilList>)list;

+ (id<JavaUtilMap>)synchronizedMapWithJavaUtilMap:(id<JavaUtilMap>)map;

+ (id<JavaUtilSet>)synchronizedSetWithJavaUtilSet:(id<JavaUtilSet>)set;

+ (id<JavaUtilSortedMap>)synchronizedSortedMapWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map;

+ (id<JavaUtilSortedSet>)synchronizedSortedSetWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)set;

+ (id<JavaUtilCollection>)unmodifiableCollectionWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

+ (id<JavaUtilList>)unmodifiableListWithJavaUtilList:(id<JavaUtilList>)list;

+ (id<JavaUtilMap>)unmodifiableMapWithJavaUtilMap:(id<JavaUtilMap>)map;

+ (id<JavaUtilSet>)unmodifiableSetWithJavaUtilSet:(id<JavaUtilSet>)set;

+ (id<JavaUtilSortedMap>)unmodifiableSortedMapWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map;

+ (id<JavaUtilSortedSet>)unmodifiableSortedSetWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)set;

#pragma mark Package-Private

+ (id)checkTypeWithId:(id)obj
         withIOSClass:(IOSClass *)type;

@end

J2OBJC_STATIC_INIT(JavaUtilCollections)

FOUNDATION_EXPORT id<JavaUtilList> JavaUtilCollections_EMPTY_LIST_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilCollections, EMPTY_LIST_, id<JavaUtilList>)

FOUNDATION_EXPORT id<JavaUtilSet> JavaUtilCollections_EMPTY_SET_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilCollections, EMPTY_SET_, id<JavaUtilSet>)

FOUNDATION_EXPORT id<JavaUtilMap> JavaUtilCollections_EMPTY_MAP_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilCollections, EMPTY_MAP_, id<JavaUtilMap>)

FOUNDATION_EXPORT jint JavaUtilCollections_binarySearchWithJavaUtilList_withId_(id<JavaUtilList> list, id object);

FOUNDATION_EXPORT jint JavaUtilCollections_binarySearchWithJavaUtilList_withId_withJavaUtilComparator_(id<JavaUtilList> list, id object, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT void JavaUtilCollections_copy__WithJavaUtilList_withJavaUtilList_(id<JavaUtilList> destination, id<JavaUtilList> source);

FOUNDATION_EXPORT id<JavaUtilEnumeration> JavaUtilCollections_enumerationWithJavaUtilCollection_(id<JavaUtilCollection> collection);

FOUNDATION_EXPORT void JavaUtilCollections_fillWithJavaUtilList_withId_(id<JavaUtilList> list, id object);

FOUNDATION_EXPORT id JavaUtilCollections_maxWithJavaUtilCollection_(id<JavaUtilCollection> collection);

FOUNDATION_EXPORT id JavaUtilCollections_maxWithJavaUtilCollection_withJavaUtilComparator_(id<JavaUtilCollection> collection, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT id JavaUtilCollections_minWithJavaUtilCollection_(id<JavaUtilCollection> collection);

FOUNDATION_EXPORT id JavaUtilCollections_minWithJavaUtilCollection_withJavaUtilComparator_(id<JavaUtilCollection> collection, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT id<JavaUtilList> JavaUtilCollections_nCopiesWithInt_withId_(jint length, id object);

FOUNDATION_EXPORT void JavaUtilCollections_reverseWithJavaUtilList_(id<JavaUtilList> list);

FOUNDATION_EXPORT id<JavaUtilComparator> JavaUtilCollections_reverseOrder();

FOUNDATION_EXPORT id<JavaUtilComparator> JavaUtilCollections_reverseOrderWithJavaUtilComparator_(id<JavaUtilComparator> c);

FOUNDATION_EXPORT void JavaUtilCollections_shuffleWithJavaUtilList_(id<JavaUtilList> list);

FOUNDATION_EXPORT void JavaUtilCollections_shuffleWithJavaUtilList_withJavaUtilRandom_(id<JavaUtilList> list, JavaUtilRandom *random);

FOUNDATION_EXPORT id<JavaUtilSet> JavaUtilCollections_singletonWithId_(id object);

FOUNDATION_EXPORT id<JavaUtilList> JavaUtilCollections_singletonListWithId_(id object);

FOUNDATION_EXPORT id<JavaUtilMap> JavaUtilCollections_singletonMapWithId_withId_(id key, id value);

FOUNDATION_EXPORT void JavaUtilCollections_sortWithJavaUtilList_(id<JavaUtilList> list);

FOUNDATION_EXPORT void JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(id<JavaUtilList> list, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT void JavaUtilCollections_swapWithJavaUtilList_withInt_withInt_(id<JavaUtilList> list, jint index1, jint index2);

FOUNDATION_EXPORT jboolean JavaUtilCollections_replaceAllWithJavaUtilList_withId_withId_(id<JavaUtilList> list, id obj, id obj2);

FOUNDATION_EXPORT void JavaUtilCollections_rotateWithJavaUtilList_withInt_(id<JavaUtilList> lst, jint dist);

FOUNDATION_EXPORT jint JavaUtilCollections_indexOfSubListWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> list, id<JavaUtilList> sublist);

FOUNDATION_EXPORT jint JavaUtilCollections_lastIndexOfSubListWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> list, id<JavaUtilList> sublist);

FOUNDATION_EXPORT JavaUtilArrayList *JavaUtilCollections_listWithJavaUtilEnumeration_(id<JavaUtilEnumeration> enumeration);

FOUNDATION_EXPORT id<JavaUtilCollection> JavaUtilCollections_synchronizedCollectionWithJavaUtilCollection_(id<JavaUtilCollection> collection);

FOUNDATION_EXPORT id<JavaUtilList> JavaUtilCollections_synchronizedListWithJavaUtilList_(id<JavaUtilList> list);

FOUNDATION_EXPORT id<JavaUtilMap> JavaUtilCollections_synchronizedMapWithJavaUtilMap_(id<JavaUtilMap> map);

FOUNDATION_EXPORT id<JavaUtilSet> JavaUtilCollections_synchronizedSetWithJavaUtilSet_(id<JavaUtilSet> set);

FOUNDATION_EXPORT id<JavaUtilSortedMap> JavaUtilCollections_synchronizedSortedMapWithJavaUtilSortedMap_(id<JavaUtilSortedMap> map);

FOUNDATION_EXPORT id<JavaUtilSortedSet> JavaUtilCollections_synchronizedSortedSetWithJavaUtilSortedSet_(id<JavaUtilSortedSet> set);

FOUNDATION_EXPORT id<JavaUtilCollection> JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_(id<JavaUtilCollection> collection);

FOUNDATION_EXPORT id<JavaUtilList> JavaUtilCollections_unmodifiableListWithJavaUtilList_(id<JavaUtilList> list);

FOUNDATION_EXPORT id<JavaUtilMap> JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(id<JavaUtilMap> map);

FOUNDATION_EXPORT id<JavaUtilSet> JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(id<JavaUtilSet> set);

FOUNDATION_EXPORT id<JavaUtilSortedMap> JavaUtilCollections_unmodifiableSortedMapWithJavaUtilSortedMap_(id<JavaUtilSortedMap> map);

FOUNDATION_EXPORT id<JavaUtilSortedSet> JavaUtilCollections_unmodifiableSortedSetWithJavaUtilSortedSet_(id<JavaUtilSortedSet> set);

FOUNDATION_EXPORT jint JavaUtilCollections_frequencyWithJavaUtilCollection_withId_(id<JavaUtilCollection> c, id o);

FOUNDATION_EXPORT id<JavaUtilList> JavaUtilCollections_emptyList();

FOUNDATION_EXPORT id<JavaUtilSet> JavaUtilCollections_emptySet();

FOUNDATION_EXPORT id<JavaUtilMap> JavaUtilCollections_emptyMap();

FOUNDATION_EXPORT id<JavaUtilEnumeration> JavaUtilCollections_emptyEnumeration();

FOUNDATION_EXPORT id<JavaUtilIterator> JavaUtilCollections_emptyIterator();

FOUNDATION_EXPORT id<JavaUtilListIterator> JavaUtilCollections_emptyListIterator();

FOUNDATION_EXPORT id<JavaUtilCollection> JavaUtilCollections_checkedCollectionWithJavaUtilCollection_withIOSClass_(id<JavaUtilCollection> c, IOSClass *type);

FOUNDATION_EXPORT id<JavaUtilMap> JavaUtilCollections_checkedMapWithJavaUtilMap_withIOSClass_withIOSClass_(id<JavaUtilMap> m, IOSClass *keyType, IOSClass *valueType);

FOUNDATION_EXPORT id<JavaUtilList> JavaUtilCollections_checkedListWithJavaUtilList_withIOSClass_(id<JavaUtilList> list, IOSClass *type);

FOUNDATION_EXPORT id<JavaUtilSet> JavaUtilCollections_checkedSetWithJavaUtilSet_withIOSClass_(id<JavaUtilSet> s, IOSClass *type);

FOUNDATION_EXPORT id<JavaUtilSortedMap> JavaUtilCollections_checkedSortedMapWithJavaUtilSortedMap_withIOSClass_withIOSClass_(id<JavaUtilSortedMap> m, IOSClass *keyType, IOSClass *valueType);

FOUNDATION_EXPORT id<JavaUtilSortedSet> JavaUtilCollections_checkedSortedSetWithJavaUtilSortedSet_withIOSClass_(id<JavaUtilSortedSet> s, IOSClass *type);

FOUNDATION_EXPORT jboolean JavaUtilCollections_addAllWithJavaUtilCollection_withNSObjectArray_(id<JavaUtilCollection> c, IOSObjectArray *a);

FOUNDATION_EXPORT jboolean JavaUtilCollections_disjointWithJavaUtilCollection_withJavaUtilCollection_(id<JavaUtilCollection> c1, id<JavaUtilCollection> c2);

FOUNDATION_EXPORT id JavaUtilCollections_checkTypeWithId_withIOSClass_(id obj, IOSClass *type);

FOUNDATION_EXPORT id<JavaUtilSet> JavaUtilCollections_newSetFromMapWithJavaUtilMap_(id<JavaUtilMap> map);

FOUNDATION_EXPORT id<JavaUtilQueue> JavaUtilCollections_asLifoQueueWithJavaUtilDeque_(id<JavaUtilDeque> deque);

FOUNDATION_EXPORT jint JavaUtilCollections_secondaryHashWithId_(id key);

FOUNDATION_EXPORT jint JavaUtilCollections_secondaryIdentityHashWithId_(id key);

FOUNDATION_EXPORT jint JavaUtilCollections_roundUpToPowerOfTwoWithInt_(jint i);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilCollections)

@interface JavaUtilCollections_SynchronizedCollection : NSObject < JavaUtilCollection, JavaIoSerializable > {
 @public
  id<JavaUtilCollection> c_;
  id mutex_;
}

#pragma mark Public

- (jboolean)addWithId:(id)object;

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

- (void)clear;

- (jboolean)containsWithId:(id)object;

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

- (jboolean)isEmpty;

- (id<JavaUtilIterator>)iterator;

- (jboolean)removeWithId:(id)object;

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

- (jint)size;

- (IOSObjectArray *)toArray;

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)array;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection
                                    withId:(id)mutex;


@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilCollections_SynchronizedCollection)

J2OBJC_FIELD_SETTER(JavaUtilCollections_SynchronizedCollection, c_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(JavaUtilCollections_SynchronizedCollection, mutex_, id)

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedCollection_initWithJavaUtilCollection_(JavaUtilCollections_SynchronizedCollection *self, id<JavaUtilCollection> collection);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedCollection *new_JavaUtilCollections_SynchronizedCollection_initWithJavaUtilCollection_(id<JavaUtilCollection> collection) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedCollection_initWithJavaUtilCollection_withId_(JavaUtilCollections_SynchronizedCollection *self, id<JavaUtilCollection> collection, id mutex);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedCollection *new_JavaUtilCollections_SynchronizedCollection_initWithJavaUtilCollection_withId_(id<JavaUtilCollection> collection, id mutex) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilCollections_SynchronizedCollection)

@interface JavaUtilCollections_SynchronizedList : JavaUtilCollections_SynchronizedCollection < JavaUtilList > {
 @public
  id<JavaUtilList> list_;
}

#pragma mark Public

- (void)addWithInt:(jint)location
            withId:(id)object;

- (jboolean)addAllWithInt:(jint)location
   withJavaUtilCollection:(id<JavaUtilCollection>)collection;

- (jboolean)isEqual:(id)object;

- (id)getWithInt:(jint)location;

- (NSUInteger)hash;

- (jint)indexOfWithId:(id)object;

- (jint)lastIndexOfWithId:(id)object;

- (id<JavaUtilListIterator>)listIterator;

- (id<JavaUtilListIterator>)listIteratorWithInt:(jint)location;

- (id)removeWithInt:(jint)location;

- (id)setWithInt:(jint)location
          withId:(id)object;

- (id<JavaUtilList>)subListWithInt:(jint)start
                           withInt:(jint)end;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)l;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)l
                              withId:(id)mutex;


@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilCollections_SynchronizedList)

J2OBJC_FIELD_SETTER(JavaUtilCollections_SynchronizedList, list_, id<JavaUtilList>)

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedList_initWithJavaUtilList_(JavaUtilCollections_SynchronizedList *self, id<JavaUtilList> l);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedList *new_JavaUtilCollections_SynchronizedList_initWithJavaUtilList_(id<JavaUtilList> l) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedList_initWithJavaUtilList_withId_(JavaUtilCollections_SynchronizedList *self, id<JavaUtilList> l, id mutex);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedList *new_JavaUtilCollections_SynchronizedList_initWithJavaUtilList_withId_(id<JavaUtilList> l, id mutex) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilCollections_SynchronizedList)

@interface JavaUtilCollections_SynchronizedRandomAccessList : JavaUtilCollections_SynchronizedList < JavaUtilRandomAccess >

#pragma mark Public

- (id<JavaUtilList>)subListWithInt:(jint)start
                           withInt:(jint)end;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)l;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)l
                              withId:(id)mutex;


@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilCollections_SynchronizedRandomAccessList)

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedRandomAccessList_initWithJavaUtilList_(JavaUtilCollections_SynchronizedRandomAccessList *self, id<JavaUtilList> l);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedRandomAccessList *new_JavaUtilCollections_SynchronizedRandomAccessList_initWithJavaUtilList_(id<JavaUtilList> l) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedRandomAccessList_initWithJavaUtilList_withId_(JavaUtilCollections_SynchronizedRandomAccessList *self, id<JavaUtilList> l, id mutex);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedRandomAccessList *new_JavaUtilCollections_SynchronizedRandomAccessList_initWithJavaUtilList_withId_(id<JavaUtilList> l, id mutex) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilCollections_SynchronizedRandomAccessList)

@interface JavaUtilCollections_SynchronizedMap : NSObject < JavaUtilMap, JavaIoSerializable > {
 @public
  id mutex_;
}

#pragma mark Public

- (void)clear;

- (jboolean)containsKeyWithId:(id)key;

- (jboolean)containsValueWithId:(id)value;

- (id<JavaUtilSet>)entrySet;

- (jboolean)isEqual:(id)object;

- (id)getWithId:(id)key;

- (NSUInteger)hash;

- (jboolean)isEmpty;

- (id<JavaUtilSet>)keySet;

- (id)putWithId:(id)key
         withId:(id)value;

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)map;

- (id)removeWithId:(id)key;

- (jint)size;

- (NSString *)description;

- (id<JavaUtilCollection>)values;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map;

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map
                             withId:(id)mutex;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilCollections_SynchronizedMap)

J2OBJC_FIELD_SETTER(JavaUtilCollections_SynchronizedMap, mutex_, id)

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedMap_initWithJavaUtilMap_(JavaUtilCollections_SynchronizedMap *self, id<JavaUtilMap> map);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedMap *new_JavaUtilCollections_SynchronizedMap_initWithJavaUtilMap_(id<JavaUtilMap> map) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedMap_initWithJavaUtilMap_withId_(JavaUtilCollections_SynchronizedMap *self, id<JavaUtilMap> map, id mutex);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedMap *new_JavaUtilCollections_SynchronizedMap_initWithJavaUtilMap_withId_(id<JavaUtilMap> map, id mutex) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilCollections_SynchronizedMap)

@interface JavaUtilCollections_SynchronizedSet : JavaUtilCollections_SynchronizedCollection < JavaUtilSet >

#pragma mark Public

- (jboolean)isEqual:(id)object;

- (NSUInteger)hash;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)set;

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)set
                             withId:(id)mutex;


@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilCollections_SynchronizedSet)

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedSet_initWithJavaUtilSet_(JavaUtilCollections_SynchronizedSet *self, id<JavaUtilSet> set);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedSet *new_JavaUtilCollections_SynchronizedSet_initWithJavaUtilSet_(id<JavaUtilSet> set) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedSet_initWithJavaUtilSet_withId_(JavaUtilCollections_SynchronizedSet *self, id<JavaUtilSet> set, id mutex);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedSet *new_JavaUtilCollections_SynchronizedSet_initWithJavaUtilSet_withId_(id<JavaUtilSet> set, id mutex) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilCollections_SynchronizedSet)

@interface JavaUtilCollections_SynchronizedSortedMap : JavaUtilCollections_SynchronizedMap < JavaUtilSortedMap >

#pragma mark Public

- (id<JavaUtilComparator>)comparator;

- (id)firstKey;

- (id<JavaUtilSortedMap>)headMapWithId:(id)endKey;

- (id)lastKey;

- (id<JavaUtilSortedMap>)subMapWithId:(id)startKey
                               withId:(id)endKey;

- (id<JavaUtilSortedMap>)tailMapWithId:(id)startKey;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map;

- (instancetype)initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map
                                   withId:(id)mutex;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilCollections_SynchronizedSortedMap)

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedSortedMap_initWithJavaUtilSortedMap_(JavaUtilCollections_SynchronizedSortedMap *self, id<JavaUtilSortedMap> map);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedSortedMap *new_JavaUtilCollections_SynchronizedSortedMap_initWithJavaUtilSortedMap_(id<JavaUtilSortedMap> map) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedSortedMap_initWithJavaUtilSortedMap_withId_(JavaUtilCollections_SynchronizedSortedMap *self, id<JavaUtilSortedMap> map, id mutex);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedSortedMap *new_JavaUtilCollections_SynchronizedSortedMap_initWithJavaUtilSortedMap_withId_(id<JavaUtilSortedMap> map, id mutex) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilCollections_SynchronizedSortedMap)

@interface JavaUtilCollections_SynchronizedSortedSet : JavaUtilCollections_SynchronizedSet < JavaUtilSortedSet >

#pragma mark Public

- (id<JavaUtilComparator>)comparator;

- (id)first;

- (id<JavaUtilSortedSet>)headSetWithId:(id)end;

- (id)last;

- (id<JavaUtilSortedSet>)subSetWithId:(id)start
                               withId:(id)end;

- (id<JavaUtilSortedSet>)tailSetWithId:(id)start;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)set;

- (instancetype)initWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)set
                                   withId:(id)mutex;


@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilCollections_SynchronizedSortedSet)

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedSortedSet_initWithJavaUtilSortedSet_(JavaUtilCollections_SynchronizedSortedSet *self, id<JavaUtilSortedSet> set);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedSortedSet *new_JavaUtilCollections_SynchronizedSortedSet_initWithJavaUtilSortedSet_(id<JavaUtilSortedSet> set) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilCollections_SynchronizedSortedSet_initWithJavaUtilSortedSet_withId_(JavaUtilCollections_SynchronizedSortedSet *self, id<JavaUtilSortedSet> set, id mutex);

FOUNDATION_EXPORT JavaUtilCollections_SynchronizedSortedSet *new_JavaUtilCollections_SynchronizedSortedSet_initWithJavaUtilSortedSet_withId_(id<JavaUtilSortedSet> set, id mutex) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilCollections_SynchronizedSortedSet)

#endif // _JavaUtilCollections_H_
