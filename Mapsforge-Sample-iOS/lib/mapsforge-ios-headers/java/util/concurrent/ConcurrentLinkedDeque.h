//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/concurrent/ConcurrentLinkedDeque.java
//

#ifndef _JavaUtilConcurrentConcurrentLinkedDeque_H_
#define _JavaUtilConcurrentConcurrentLinkedDeque_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "java/util/AbstractCollection.h"
#include "java/util/Deque.h"

@class IOSObjectArray;
@class JavaUtilConcurrentConcurrentLinkedDeque_Node;
@protocol JavaUtilCollection;
@protocol JavaUtilIterator;

@interface JavaUtilConcurrentConcurrentLinkedDeque : JavaUtilAbstractCollection < JavaUtilDeque, JavaIoSerializable >

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (jboolean)addWithId:(id)e;

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (void)addFirstWithId:(id)e;

- (void)addLastWithId:(id)e;

- (void)clear;

- (jboolean)containsWithId:(id)o;

- (id<JavaUtilIterator>)descendingIterator;

- (id)element;

- (id)getFirst;

- (id)getLast;

- (jboolean)isEmpty;

- (id<JavaUtilIterator>)iterator;

- (jboolean)offerWithId:(id)e;

- (jboolean)offerFirstWithId:(id)e;

- (jboolean)offerLastWithId:(id)e;

- (id)peek;

- (id)peekFirst;

- (id)peekLast;

- (id)poll;

- (id)pollFirst;

- (id)pollLast;

- (id)pop;

- (void)pushWithId:(id)e;

- (id)remove;

- (jboolean)removeWithId:(id)o;

- (id)removeFirst;

- (jboolean)removeFirstOccurrenceWithId:(id)o;

- (id)removeLast;

- (jboolean)removeLastOccurrenceWithId:(id)o;

- (jint)size;

- (IOSObjectArray *)toArray;

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)a;

#pragma mark Package-Private

- (JavaUtilConcurrentConcurrentLinkedDeque_Node *)first;

- (JavaUtilConcurrentConcurrentLinkedDeque_Node *)last;

- (JavaUtilConcurrentConcurrentLinkedDeque_Node *)nextTerminator;

- (JavaUtilConcurrentConcurrentLinkedDeque_Node *)predWithJavaUtilConcurrentConcurrentLinkedDeque_Node:(JavaUtilConcurrentConcurrentLinkedDeque_Node *)p;

- (JavaUtilConcurrentConcurrentLinkedDeque_Node *)prevTerminator;

- (JavaUtilConcurrentConcurrentLinkedDeque_Node *)succWithJavaUtilConcurrentConcurrentLinkedDeque_Node:(JavaUtilConcurrentConcurrentLinkedDeque_Node *)p;

- (void)unlinkWithJavaUtilConcurrentConcurrentLinkedDeque_Node:(JavaUtilConcurrentConcurrentLinkedDeque_Node *)x;


@end

J2OBJC_STATIC_INIT(JavaUtilConcurrentConcurrentLinkedDeque)

FOUNDATION_EXPORT void JavaUtilConcurrentConcurrentLinkedDeque_init(JavaUtilConcurrentConcurrentLinkedDeque *self);

FOUNDATION_EXPORT JavaUtilConcurrentConcurrentLinkedDeque *new_JavaUtilConcurrentConcurrentLinkedDeque_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilConcurrentConcurrentLinkedDeque_initWithJavaUtilCollection_(JavaUtilConcurrentConcurrentLinkedDeque *self, id<JavaUtilCollection> c);

FOUNDATION_EXPORT JavaUtilConcurrentConcurrentLinkedDeque *new_JavaUtilConcurrentConcurrentLinkedDeque_initWithJavaUtilCollection_(id<JavaUtilCollection> c) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentConcurrentLinkedDeque)

@interface JavaUtilConcurrentConcurrentLinkedDeque_Node : NSObject {
 @public
  JavaUtilConcurrentConcurrentLinkedDeque_Node *prev_;
  id item_;
  JavaUtilConcurrentConcurrentLinkedDeque_Node *next_;
}

#pragma mark Package-Private

- (instancetype)init;

- (instancetype)initWithId:(id)item;

- (jboolean)casItemWithId:(id)cmp
                   withId:(id)val;

- (jboolean)casNextWithJavaUtilConcurrentConcurrentLinkedDeque_Node:(JavaUtilConcurrentConcurrentLinkedDeque_Node *)cmp
                   withJavaUtilConcurrentConcurrentLinkedDeque_Node:(JavaUtilConcurrentConcurrentLinkedDeque_Node *)val;

- (jboolean)casPrevWithJavaUtilConcurrentConcurrentLinkedDeque_Node:(JavaUtilConcurrentConcurrentLinkedDeque_Node *)cmp
                   withJavaUtilConcurrentConcurrentLinkedDeque_Node:(JavaUtilConcurrentConcurrentLinkedDeque_Node *)val;

- (void)lazySetNextWithJavaUtilConcurrentConcurrentLinkedDeque_Node:(JavaUtilConcurrentConcurrentLinkedDeque_Node *)val;

- (void)lazySetPrevWithJavaUtilConcurrentConcurrentLinkedDeque_Node:(JavaUtilConcurrentConcurrentLinkedDeque_Node *)val;

@end

J2OBJC_STATIC_INIT(JavaUtilConcurrentConcurrentLinkedDeque_Node)

J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentLinkedDeque_Node, prev_, JavaUtilConcurrentConcurrentLinkedDeque_Node *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentLinkedDeque_Node, item_, id)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentLinkedDeque_Node, next_, JavaUtilConcurrentConcurrentLinkedDeque_Node *)

FOUNDATION_EXPORT void JavaUtilConcurrentConcurrentLinkedDeque_Node_init(JavaUtilConcurrentConcurrentLinkedDeque_Node *self);

FOUNDATION_EXPORT JavaUtilConcurrentConcurrentLinkedDeque_Node *new_JavaUtilConcurrentConcurrentLinkedDeque_Node_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilConcurrentConcurrentLinkedDeque_Node_initWithId_(JavaUtilConcurrentConcurrentLinkedDeque_Node *self, id item);

FOUNDATION_EXPORT JavaUtilConcurrentConcurrentLinkedDeque_Node *new_JavaUtilConcurrentConcurrentLinkedDeque_Node_initWithId_(id item) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentConcurrentLinkedDeque_Node)

#endif // _JavaUtilConcurrentConcurrentLinkedDeque_H_
