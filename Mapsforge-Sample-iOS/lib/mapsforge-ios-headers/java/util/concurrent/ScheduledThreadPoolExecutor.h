//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/concurrent/ScheduledThreadPoolExecutor.java
//

#ifndef _JavaUtilConcurrentScheduledThreadPoolExecutor_H_
#define _JavaUtilConcurrentScheduledThreadPoolExecutor_H_

#include "J2ObjC_header.h"
#include "java/util/AbstractQueue.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "java/util/concurrent/ScheduledExecutorService.h"
#include "java/util/concurrent/ThreadPoolExecutor.h"

@class IOSObjectArray;
@class JavaUtilConcurrentTimeUnitEnum;
@protocol JavaLangRunnable;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentCallable;
@protocol JavaUtilConcurrentFuture;
@protocol JavaUtilConcurrentRejectedExecutionHandler;
@protocol JavaUtilConcurrentRunnableScheduledFuture;
@protocol JavaUtilConcurrentScheduledFuture;
@protocol JavaUtilConcurrentThreadFactory;
@protocol JavaUtilIterator;
@protocol JavaUtilList;

@interface JavaUtilConcurrentScheduledThreadPoolExecutor : JavaUtilConcurrentThreadPoolExecutor < JavaUtilConcurrentScheduledExecutorService >

#pragma mark Public

- (instancetype)initWithInt:(jint)corePoolSize;

- (instancetype)initWithInt:(jint)corePoolSize
withJavaUtilConcurrentRejectedExecutionHandler:(id<JavaUtilConcurrentRejectedExecutionHandler>)handler;

- (instancetype)initWithInt:(jint)corePoolSize
withJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory;

- (instancetype)initWithInt:(jint)corePoolSize
withJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory
withJavaUtilConcurrentRejectedExecutionHandler:(id<JavaUtilConcurrentRejectedExecutionHandler>)handler;

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command;

- (jboolean)getContinueExistingPeriodicTasksAfterShutdownPolicy;

- (jboolean)getExecuteExistingDelayedTasksAfterShutdownPolicy;

- (id<JavaUtilConcurrentBlockingQueue>)getQueue;

- (jboolean)getRemoveOnCancelPolicy;

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable
                                                                       withLong:(jlong)delay
                                             withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                             withLong:(jlong)delay
                                   withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (id<JavaUtilConcurrentScheduledFuture>)scheduleAtFixedRateWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                        withLong:(jlong)initialDelay
                                                                        withLong:(jlong)period
                                              withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithFixedDelayWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                           withLong:(jlong)initialDelay
                                                                           withLong:(jlong)delay
                                                 withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (void)setContinueExistingPeriodicTasksAfterShutdownPolicyWithBoolean:(jboolean)value;

- (void)setExecuteExistingDelayedTasksAfterShutdownPolicyWithBoolean:(jboolean)value;

- (void)setRemoveOnCancelPolicyWithBoolean:(jboolean)value;

- (void)shutdown;

- (id<JavaUtilList>)shutdownNow;

- (id<JavaUtilConcurrentFuture>)submitWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)task;

- (id<JavaUtilConcurrentFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)task;

- (id<JavaUtilConcurrentFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)task
                                                    withId:(id)result;

#pragma mark Protected

- (id<JavaUtilConcurrentRunnableScheduledFuture>)decorateTaskWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable
                                              withJavaUtilConcurrentRunnableScheduledFuture:(id<JavaUtilConcurrentRunnableScheduledFuture>)task;

- (id<JavaUtilConcurrentRunnableScheduledFuture>)decorateTaskWithJavaLangRunnable:(id<JavaLangRunnable>)runnable
                                    withJavaUtilConcurrentRunnableScheduledFuture:(id<JavaUtilConcurrentRunnableScheduledFuture>)task;

#pragma mark Package-Private

- (jboolean)canRunInCurrentRunStateWithBoolean:(jboolean)periodic;

- (jlong)now;

- (void)onShutdown;

- (void)reExecutePeriodicWithJavaUtilConcurrentRunnableScheduledFuture:(id<JavaUtilConcurrentRunnableScheduledFuture>)task;

- (jlong)triggerTimeWithLong:(jlong)delay;

@end

J2OBJC_STATIC_INIT(JavaUtilConcurrentScheduledThreadPoolExecutor)

FOUNDATION_EXPORT void JavaUtilConcurrentScheduledThreadPoolExecutor_initWithInt_(JavaUtilConcurrentScheduledThreadPoolExecutor *self, jint corePoolSize);

FOUNDATION_EXPORT JavaUtilConcurrentScheduledThreadPoolExecutor *new_JavaUtilConcurrentScheduledThreadPoolExecutor_initWithInt_(jint corePoolSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilConcurrentScheduledThreadPoolExecutor_initWithInt_withJavaUtilConcurrentThreadFactory_(JavaUtilConcurrentScheduledThreadPoolExecutor *self, jint corePoolSize, id<JavaUtilConcurrentThreadFactory> threadFactory);

FOUNDATION_EXPORT JavaUtilConcurrentScheduledThreadPoolExecutor *new_JavaUtilConcurrentScheduledThreadPoolExecutor_initWithInt_withJavaUtilConcurrentThreadFactory_(jint corePoolSize, id<JavaUtilConcurrentThreadFactory> threadFactory) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilConcurrentScheduledThreadPoolExecutor_initWithInt_withJavaUtilConcurrentRejectedExecutionHandler_(JavaUtilConcurrentScheduledThreadPoolExecutor *self, jint corePoolSize, id<JavaUtilConcurrentRejectedExecutionHandler> handler);

FOUNDATION_EXPORT JavaUtilConcurrentScheduledThreadPoolExecutor *new_JavaUtilConcurrentScheduledThreadPoolExecutor_initWithInt_withJavaUtilConcurrentRejectedExecutionHandler_(jint corePoolSize, id<JavaUtilConcurrentRejectedExecutionHandler> handler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilConcurrentScheduledThreadPoolExecutor_initWithInt_withJavaUtilConcurrentThreadFactory_withJavaUtilConcurrentRejectedExecutionHandler_(JavaUtilConcurrentScheduledThreadPoolExecutor *self, jint corePoolSize, id<JavaUtilConcurrentThreadFactory> threadFactory, id<JavaUtilConcurrentRejectedExecutionHandler> handler);

FOUNDATION_EXPORT JavaUtilConcurrentScheduledThreadPoolExecutor *new_JavaUtilConcurrentScheduledThreadPoolExecutor_initWithInt_withJavaUtilConcurrentThreadFactory_withJavaUtilConcurrentRejectedExecutionHandler_(jint corePoolSize, id<JavaUtilConcurrentThreadFactory> threadFactory, id<JavaUtilConcurrentRejectedExecutionHandler> handler) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentScheduledThreadPoolExecutor)

@interface JavaUtilConcurrentScheduledThreadPoolExecutor_DelayedWorkQueue : JavaUtilAbstractQueue < JavaUtilConcurrentBlockingQueue >

#pragma mark Public

- (jboolean)addWithId:(id<JavaLangRunnable>)e;

- (void)clear;

- (jboolean)containsWithId:(id)x;

- (jint)drainToWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (jint)drainToWithJavaUtilCollection:(id<JavaUtilCollection>)c
                              withInt:(jint)maxElements;

- (jboolean)isEmpty;

- (id<JavaUtilIterator>)iterator;

- (jboolean)offerWithId:(id<JavaLangRunnable>)x;

- (jboolean)offerWithId:(id<JavaLangRunnable>)e
               withLong:(jlong)timeout
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (id<JavaUtilConcurrentRunnableScheduledFuture>)peek;

- (id<JavaUtilConcurrentRunnableScheduledFuture>)poll;

- (id<JavaUtilConcurrentRunnableScheduledFuture>)pollWithLong:(jlong)timeout
                           withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (void)putWithId:(id<JavaLangRunnable>)e;

- (jint)remainingCapacity;

- (jboolean)removeWithId:(id)x;

- (jint)size;

- (id<JavaUtilConcurrentRunnableScheduledFuture>)take;

- (IOSObjectArray *)toArray;

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)a;

#pragma mark Package-Private

- (instancetype)init;


@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentScheduledThreadPoolExecutor_DelayedWorkQueue)

FOUNDATION_EXPORT void JavaUtilConcurrentScheduledThreadPoolExecutor_DelayedWorkQueue_init(JavaUtilConcurrentScheduledThreadPoolExecutor_DelayedWorkQueue *self);

FOUNDATION_EXPORT JavaUtilConcurrentScheduledThreadPoolExecutor_DelayedWorkQueue *new_JavaUtilConcurrentScheduledThreadPoolExecutor_DelayedWorkQueue_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentScheduledThreadPoolExecutor_DelayedWorkQueue)

#endif // _JavaUtilConcurrentScheduledThreadPoolExecutor_H_
