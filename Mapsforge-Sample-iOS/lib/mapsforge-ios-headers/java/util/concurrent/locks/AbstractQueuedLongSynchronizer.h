//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.java
//

#ifndef _JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_H_
#define _JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "java/util/concurrent/locks/AbstractOwnableSynchronizer.h"
#include "java/util/concurrent/locks/Condition.h"

@class JavaLangThread;
@class JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject;
@class JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node;
@class JavaUtilConcurrentTimeUnitEnum;
@class JavaUtilDate;
@protocol JavaUtilCollection;

#define JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_spinForTimeoutThreshold 1000LL

@interface JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer : JavaUtilConcurrentLocksAbstractOwnableSynchronizer < JavaIoSerializable >

#pragma mark Public

- (void)acquireWithLong:(jlong)arg;

- (void)acquireInterruptiblyWithLong:(jlong)arg;

- (void)acquireSharedWithLong:(jlong)arg;

- (void)acquireSharedInterruptiblyWithLong:(jlong)arg;

- (id<JavaUtilCollection>)getExclusiveQueuedThreads;

- (JavaLangThread *)getFirstQueuedThread;

- (id<JavaUtilCollection>)getQueuedThreads;

- (jint)getQueueLength;

- (id<JavaUtilCollection>)getSharedQueuedThreads;

- (id<JavaUtilCollection>)getWaitingThreadsWithJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject:(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject *)condition;

- (jint)getWaitQueueLengthWithJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject:(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject *)condition;

- (jboolean)hasContended;

- (jboolean)hasQueuedThreads;

- (jboolean)hasWaitersWithJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject:(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject *)condition;

- (jboolean)isQueuedWithJavaLangThread:(JavaLangThread *)thread;

- (jboolean)ownsWithJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject:(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject *)condition;

- (jboolean)release__WithLong:(jlong)arg;

- (jboolean)releaseSharedWithLong:(jlong)arg;

- (NSString *)description;

- (jboolean)tryAcquireNanosWithLong:(jlong)arg
                           withLong:(jlong)nanosTimeout;

- (jboolean)tryAcquireSharedNanosWithLong:(jlong)arg
                                 withLong:(jlong)nanosTimeout;

#pragma mark Protected

- (instancetype)init;

- (jboolean)compareAndSetStateWithLong:(jlong)expect
                              withLong:(jlong)update;

- (jlong)getState;

- (jboolean)isHeldExclusively;

- (void)setStateWithLong:(jlong)newState;

- (jboolean)tryAcquireWithLong:(jlong)arg;

- (jlong)tryAcquireSharedWithLong:(jlong)arg;

- (jboolean)tryReleaseWithLong:(jlong)arg;

- (jboolean)tryReleaseSharedWithLong:(jlong)arg;

#pragma mark Package-Private

- (jboolean)acquireQueuedWithJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node:(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *)node
                                                                               withLong:(jlong)arg;

- (jboolean)apparentlyFirstQueuedIsExclusive;

- (jlong)fullyReleaseWithJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node:(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *)node;

- (jboolean)hasQueuedPredecessors;

- (jboolean)isOnSyncQueueWithJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node:(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *)node;

+ (void)selfInterrupt;

- (jboolean)transferAfterCancelledWaitWithJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node:(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *)node;

- (jboolean)transferForSignalWithJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node:(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *)node;

@end

J2OBJC_STATIC_INIT(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer, spinForTimeoutThreshold, jlong)

FOUNDATION_EXPORT void JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_init(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer *self);

FOUNDATION_EXPORT void JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_selfInterrupt();

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer)

#define JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node_CANCELLED 1
#define JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node_SIGNAL -1
#define JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node_CONDITION -2
#define JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node_PROPAGATE -3

@interface JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node : NSObject {
 @public
  jint waitStatus_;
  JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *prev_;
  JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *next_;
  JavaLangThread *thread_;
  JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *nextWaiter_;
}

#pragma mark Package-Private

- (instancetype)init;

- (instancetype)initWithJavaLangThread:(JavaLangThread *)thread
                               withInt:(jint)waitStatus;

- (instancetype)initWithJavaLangThread:(JavaLangThread *)thread
withJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node:(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *)mode;

- (jboolean)isShared;

- (JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *)predecessor;

@end

J2OBJC_STATIC_INIT(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node)

J2OBJC_FIELD_SETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node, prev_, JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node, next_, JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node, thread_, JavaLangThread *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node, nextWaiter_, JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *)

FOUNDATION_EXPORT JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node_SHARED_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node, SHARED_, JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *)

FOUNDATION_EXPORT JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node_EXCLUSIVE_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node, EXCLUSIVE_, JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node, CANCELLED, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node, SIGNAL, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node, CONDITION, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node, PROPAGATE, jint)

FOUNDATION_EXPORT void JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node_init(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *self);

FOUNDATION_EXPORT JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *new_JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node_initWithJavaLangThread_withJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node_(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *self, JavaLangThread *thread, JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *mode);

FOUNDATION_EXPORT JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *new_JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node_initWithJavaLangThread_withJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node_(JavaLangThread *thread, JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *mode) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node_initWithJavaLangThread_withInt_(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *self, JavaLangThread *thread, jint waitStatus);

FOUNDATION_EXPORT JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *new_JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node_initWithJavaLangThread_withInt_(JavaLangThread *thread, jint waitStatus) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node)

@interface JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject : NSObject < JavaUtilConcurrentLocksCondition, JavaIoSerializable >

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer:(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer *)outer$;

- (void)await;

- (jboolean)awaitWithLong:(jlong)time
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (jlong)awaitNanosWithLong:(jlong)nanosTimeout;

- (void)awaitUninterruptibly;

- (jboolean)awaitUntilWithJavaUtilDate:(JavaUtilDate *)deadline;

- (void)signal;

- (void)signalAll;

#pragma mark Protected

- (id<JavaUtilCollection>)getWaitingThreads;

- (jint)getWaitQueueLength;

- (jboolean)hasWaiters;

#pragma mark Package-Private

- (jboolean)isOwnedByWithJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer:(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer *)sync;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject)

FOUNDATION_EXPORT void JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject_initWithJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject *self, JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer *outer$);

FOUNDATION_EXPORT JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject *new_JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject_initWithJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject)

#endif // _JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_H_
