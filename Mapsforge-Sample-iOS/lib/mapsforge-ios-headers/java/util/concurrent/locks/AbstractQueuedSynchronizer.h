//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/concurrent/locks/AbstractQueuedSynchronizer.java
//

#ifndef _JavaUtilConcurrentLocksAbstractQueuedSynchronizer_H_
#define _JavaUtilConcurrentLocksAbstractQueuedSynchronizer_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "java/util/concurrent/locks/AbstractOwnableSynchronizer.h"
#include "java/util/concurrent/locks/Condition.h"

@class JavaLangThread;
@class JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject;
@class JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node;
@class JavaUtilConcurrentTimeUnitEnum;
@class JavaUtilDate;
@protocol JavaUtilCollection;

#define JavaUtilConcurrentLocksAbstractQueuedSynchronizer_spinForTimeoutThreshold 1000LL

@interface JavaUtilConcurrentLocksAbstractQueuedSynchronizer : JavaUtilConcurrentLocksAbstractOwnableSynchronizer < JavaIoSerializable >

#pragma mark Public

- (void)acquireWithInt:(jint)arg;

- (void)acquireInterruptiblyWithInt:(jint)arg;

- (void)acquireSharedWithInt:(jint)arg;

- (void)acquireSharedInterruptiblyWithInt:(jint)arg;

- (id<JavaUtilCollection>)getExclusiveQueuedThreads;

- (JavaLangThread *)getFirstQueuedThread;

- (id<JavaUtilCollection>)getQueuedThreads;

- (jint)getQueueLength;

- (id<JavaUtilCollection>)getSharedQueuedThreads;

- (id<JavaUtilCollection>)getWaitingThreadsWithJavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject:(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject *)condition;

- (jint)getWaitQueueLengthWithJavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject:(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject *)condition;

- (jboolean)hasContended;

- (jboolean)hasQueuedPredecessors;

- (jboolean)hasQueuedThreads;

- (jboolean)hasWaitersWithJavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject:(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject *)condition;

- (jboolean)isQueuedWithJavaLangThread:(JavaLangThread *)thread;

- (jboolean)ownsWithJavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject:(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject *)condition;

- (jboolean)release__WithInt:(jint)arg;

- (jboolean)releaseSharedWithInt:(jint)arg;

- (NSString *)description;

- (jboolean)tryAcquireNanosWithInt:(jint)arg
                          withLong:(jlong)nanosTimeout;

- (jboolean)tryAcquireSharedNanosWithInt:(jint)arg
                                withLong:(jlong)nanosTimeout;

#pragma mark Protected

- (instancetype)init;

- (jboolean)compareAndSetStateWithInt:(jint)expect
                              withInt:(jint)update;

- (jint)getState;

- (jboolean)isHeldExclusively;

- (void)setStateWithInt:(jint)newState;

- (jboolean)tryAcquireWithInt:(jint)arg;

- (jint)tryAcquireSharedWithInt:(jint)arg;

- (jboolean)tryReleaseWithInt:(jint)arg;

- (jboolean)tryReleaseSharedWithInt:(jint)arg;

#pragma mark Package-Private

- (jboolean)acquireQueuedWithJavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node:(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node *)node
                                                                            withInt:(jint)arg;

- (jboolean)apparentlyFirstQueuedIsExclusive;

- (jint)fullyReleaseWithJavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node:(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node *)node;

- (jboolean)isOnSyncQueueWithJavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node:(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node *)node;

+ (void)selfInterrupt;

- (jboolean)transferAfterCancelledWaitWithJavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node:(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node *)node;

- (jboolean)transferForSignalWithJavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node:(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node *)node;

@end

J2OBJC_STATIC_INIT(JavaUtilConcurrentLocksAbstractQueuedSynchronizer)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedSynchronizer, spinForTimeoutThreshold, jlong)

FOUNDATION_EXPORT void JavaUtilConcurrentLocksAbstractQueuedSynchronizer_init(JavaUtilConcurrentLocksAbstractQueuedSynchronizer *self);

FOUNDATION_EXPORT void JavaUtilConcurrentLocksAbstractQueuedSynchronizer_selfInterrupt();

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentLocksAbstractQueuedSynchronizer)

#define JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node_CANCELLED 1
#define JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node_SIGNAL -1
#define JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node_CONDITION -2
#define JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node_PROPAGATE -3

@interface JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node : NSObject {
 @public
  jint waitStatus_;
  JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node *prev_;
  JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node *next_;
  JavaLangThread *thread_;
  JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node *nextWaiter_;
}

#pragma mark Package-Private

- (instancetype)init;

- (instancetype)initWithJavaLangThread:(JavaLangThread *)thread
                               withInt:(jint)waitStatus;

- (instancetype)initWithJavaLangThread:(JavaLangThread *)thread
withJavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node:(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node *)mode;

- (jboolean)isShared;

- (JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node *)predecessor;

@end

J2OBJC_STATIC_INIT(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node)

J2OBJC_FIELD_SETTER(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node, prev_, JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node, next_, JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node, thread_, JavaLangThread *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node, nextWaiter_, JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node *)

FOUNDATION_EXPORT JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node *JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node_SHARED_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node, SHARED_, JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node *)

FOUNDATION_EXPORT JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node *JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node_EXCLUSIVE_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node, EXCLUSIVE_, JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node *)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node, CANCELLED, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node, SIGNAL, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node, CONDITION, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node, PROPAGATE, jint)

FOUNDATION_EXPORT void JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node_init(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node *self);

FOUNDATION_EXPORT JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node *new_JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node_initWithJavaLangThread_withJavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node_(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node *self, JavaLangThread *thread, JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node *mode);

FOUNDATION_EXPORT JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node *new_JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node_initWithJavaLangThread_withJavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node_(JavaLangThread *thread, JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node *mode) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node_initWithJavaLangThread_withInt_(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node *self, JavaLangThread *thread, jint waitStatus);

FOUNDATION_EXPORT JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node *new_JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node_initWithJavaLangThread_withInt_(JavaLangThread *thread, jint waitStatus) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node)

@interface JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject : NSObject < JavaUtilConcurrentLocksCondition, JavaIoSerializable >

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentLocksAbstractQueuedSynchronizer:(JavaUtilConcurrentLocksAbstractQueuedSynchronizer *)outer$;

- (void)await;

- (jboolean)awaitWithLong:(jlong)time
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (jlong)awaitNanosWithLong:(jlong)nanosTimeout;

- (void)awaitUninterruptibly;

- (jboolean)awaitUntilWithJavaUtilDate:(JavaUtilDate *)deadline;

- (void)signal;

- (void)signalAll;

#pragma mark Protected

- (id<JavaUtilCollection>)getWaitingThreads;

- (jint)getWaitQueueLength;

- (jboolean)hasWaiters;

#pragma mark Package-Private

- (jboolean)isOwnedByWithJavaUtilConcurrentLocksAbstractQueuedSynchronizer:(JavaUtilConcurrentLocksAbstractQueuedSynchronizer *)sync;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject)

FOUNDATION_EXPORT void JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject_initWithJavaUtilConcurrentLocksAbstractQueuedSynchronizer_(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject *self, JavaUtilConcurrentLocksAbstractQueuedSynchronizer *outer$);

FOUNDATION_EXPORT JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject *new_JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject_initWithJavaUtilConcurrentLocksAbstractQueuedSynchronizer_(JavaUtilConcurrentLocksAbstractQueuedSynchronizer *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject)

#endif // _JavaUtilConcurrentLocksAbstractQueuedSynchronizer_H_
