//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/concurrent/locks/ReentrantLock.java
//

#ifndef _JavaUtilConcurrentLocksReentrantLock_H_
#define _JavaUtilConcurrentLocksReentrantLock_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "java/util/concurrent/locks/AbstractQueuedSynchronizer.h"
#include "java/util/concurrent/locks/Lock.h"

@class JavaLangThread;
@class JavaUtilConcurrentTimeUnitEnum;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentLocksCondition;

@interface JavaUtilConcurrentLocksReentrantLock : NSObject < JavaUtilConcurrentLocksLock, JavaIoSerializable >

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithBoolean:(jboolean)fair;

- (jint)getHoldCount;

- (jint)getQueueLength;

- (jint)getWaitQueueLengthWithJavaUtilConcurrentLocksCondition:(id<JavaUtilConcurrentLocksCondition>)condition;

- (jboolean)hasQueuedThreadWithJavaLangThread:(JavaLangThread *)thread;

- (jboolean)hasQueuedThreads;

- (jboolean)hasWaitersWithJavaUtilConcurrentLocksCondition:(id<JavaUtilConcurrentLocksCondition>)condition;

- (jboolean)isFair;

- (jboolean)isHeldByCurrentThread;

- (jboolean)isLocked;

- (void)lock;

- (void)lockInterruptibly;

- (id<JavaUtilConcurrentLocksCondition>)newCondition OBJC_METHOD_FAMILY_NONE;

- (NSString *)description;

- (jboolean)tryLock;

- (jboolean)tryLockWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (void)unlock;

#pragma mark Protected

- (JavaLangThread *)getOwner;

- (id<JavaUtilCollection>)getQueuedThreads;

- (id<JavaUtilCollection>)getWaitingThreadsWithJavaUtilConcurrentLocksCondition:(id<JavaUtilConcurrentLocksCondition>)condition;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentLocksReentrantLock)

FOUNDATION_EXPORT void JavaUtilConcurrentLocksReentrantLock_init(JavaUtilConcurrentLocksReentrantLock *self);

FOUNDATION_EXPORT JavaUtilConcurrentLocksReentrantLock *new_JavaUtilConcurrentLocksReentrantLock_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilConcurrentLocksReentrantLock_initWithBoolean_(JavaUtilConcurrentLocksReentrantLock *self, jboolean fair);

FOUNDATION_EXPORT JavaUtilConcurrentLocksReentrantLock *new_JavaUtilConcurrentLocksReentrantLock_initWithBoolean_(jboolean fair) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentLocksReentrantLock)

@interface JavaUtilConcurrentLocksReentrantLock_Sync : JavaUtilConcurrentLocksAbstractQueuedSynchronizer

#pragma mark Protected

- (jboolean)isHeldExclusively;

- (jboolean)tryReleaseWithInt:(jint)releases;

#pragma mark Package-Private

- (instancetype)init;

- (jint)getHoldCount;

- (JavaLangThread *)getOwner;

- (jboolean)isLocked;

- (void)lock;

- (JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject *)newCondition OBJC_METHOD_FAMILY_NONE;

- (jboolean)nonfairTryAcquireWithInt:(jint)acquires;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentLocksReentrantLock_Sync)

FOUNDATION_EXPORT void JavaUtilConcurrentLocksReentrantLock_Sync_init(JavaUtilConcurrentLocksReentrantLock_Sync *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentLocksReentrantLock_Sync)

@interface JavaUtilConcurrentLocksReentrantLock_NonfairSync : JavaUtilConcurrentLocksReentrantLock_Sync

#pragma mark Protected

- (jboolean)tryAcquireWithInt:(jint)acquires;

#pragma mark Package-Private

- (instancetype)init;

- (void)lock;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentLocksReentrantLock_NonfairSync)

FOUNDATION_EXPORT void JavaUtilConcurrentLocksReentrantLock_NonfairSync_init(JavaUtilConcurrentLocksReentrantLock_NonfairSync *self);

FOUNDATION_EXPORT JavaUtilConcurrentLocksReentrantLock_NonfairSync *new_JavaUtilConcurrentLocksReentrantLock_NonfairSync_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentLocksReentrantLock_NonfairSync)

@interface JavaUtilConcurrentLocksReentrantLock_FairSync : JavaUtilConcurrentLocksReentrantLock_Sync

#pragma mark Protected

- (jboolean)tryAcquireWithInt:(jint)acquires;

#pragma mark Package-Private

- (instancetype)init;

- (void)lock;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentLocksReentrantLock_FairSync)

FOUNDATION_EXPORT void JavaUtilConcurrentLocksReentrantLock_FairSync_init(JavaUtilConcurrentLocksReentrantLock_FairSync *self);

FOUNDATION_EXPORT JavaUtilConcurrentLocksReentrantLock_FairSync *new_JavaUtilConcurrentLocksReentrantLock_FairSync_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentLocksReentrantLock_FairSync)

#endif // _JavaUtilConcurrentLocksReentrantLock_H_
