//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/concurrent/ArrayBlockingQueue.java
//

#ifndef _JavaUtilConcurrentArrayBlockingQueue_H_
#define _JavaUtilConcurrentArrayBlockingQueue_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "java/util/AbstractQueue.h"
#include "java/util/concurrent/BlockingQueue.h"

@class IOSObjectArray;
@class JavaUtilConcurrentArrayBlockingQueue_Itr;
@class JavaUtilConcurrentArrayBlockingQueue_Itrs;
@class JavaUtilConcurrentLocksReentrantLock;
@class JavaUtilConcurrentTimeUnitEnum;
@protocol JavaUtilCollection;
@protocol JavaUtilIterator;

@interface JavaUtilConcurrentArrayBlockingQueue : JavaUtilAbstractQueue < JavaUtilConcurrentBlockingQueue, JavaIoSerializable > {
 @public
  IOSObjectArray *items_;
  jint takeIndex_;
  jint putIndex_;
  jint count_;
  JavaUtilConcurrentLocksReentrantLock *lock_;
  JavaUtilConcurrentArrayBlockingQueue_Itrs *itrs_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)capacity;

- (instancetype)initWithInt:(jint)capacity
                withBoolean:(jboolean)fair;

- (instancetype)initWithInt:(jint)capacity
                withBoolean:(jboolean)fair
     withJavaUtilCollection:(id<JavaUtilCollection>)c;

- (jboolean)addWithId:(id)e;

- (void)clear;

- (jboolean)containsWithId:(id)o;

- (jint)drainToWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (jint)drainToWithJavaUtilCollection:(id<JavaUtilCollection>)c
                              withInt:(jint)maxElements;

- (id<JavaUtilIterator>)iterator;

- (jboolean)offerWithId:(id)e;

- (jboolean)offerWithId:(id)e
               withLong:(jlong)timeout
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (id)peek;

- (id)poll;

- (id)pollWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (void)putWithId:(id)e;

- (jint)remainingCapacity;

- (jboolean)removeWithId:(id)o;

- (jint)size;

- (id)take;

- (IOSObjectArray *)toArray;

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)a;

- (NSString *)description;

#pragma mark Package-Private

- (jint)decWithInt:(jint)i;

- (jint)incWithInt:(jint)i;

- (id)itemAtWithInt:(jint)i;

- (void)removeAtWithInt:(jint)removeIndex;


@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentArrayBlockingQueue)

J2OBJC_FIELD_SETTER(JavaUtilConcurrentArrayBlockingQueue, items_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentArrayBlockingQueue, lock_, JavaUtilConcurrentLocksReentrantLock *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentArrayBlockingQueue, itrs_, JavaUtilConcurrentArrayBlockingQueue_Itrs *)

FOUNDATION_EXPORT void JavaUtilConcurrentArrayBlockingQueue_initWithInt_(JavaUtilConcurrentArrayBlockingQueue *self, jint capacity);

FOUNDATION_EXPORT JavaUtilConcurrentArrayBlockingQueue *new_JavaUtilConcurrentArrayBlockingQueue_initWithInt_(jint capacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilConcurrentArrayBlockingQueue_initWithInt_withBoolean_(JavaUtilConcurrentArrayBlockingQueue *self, jint capacity, jboolean fair);

FOUNDATION_EXPORT JavaUtilConcurrentArrayBlockingQueue *new_JavaUtilConcurrentArrayBlockingQueue_initWithInt_withBoolean_(jint capacity, jboolean fair) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilConcurrentArrayBlockingQueue_initWithInt_withBoolean_withJavaUtilCollection_(JavaUtilConcurrentArrayBlockingQueue *self, jint capacity, jboolean fair, id<JavaUtilCollection> c);

FOUNDATION_EXPORT JavaUtilConcurrentArrayBlockingQueue *new_JavaUtilConcurrentArrayBlockingQueue_initWithInt_withBoolean_withJavaUtilCollection_(jint capacity, jboolean fair, id<JavaUtilCollection> c) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentArrayBlockingQueue)

@interface JavaUtilConcurrentArrayBlockingQueue_Itrs : NSObject {
 @public
  jint cycles_;
}

#pragma mark Package-Private

- (instancetype)initWithJavaUtilConcurrentArrayBlockingQueue:(JavaUtilConcurrentArrayBlockingQueue *)outer$
                withJavaUtilConcurrentArrayBlockingQueue_Itr:(JavaUtilConcurrentArrayBlockingQueue_Itr *)initial;

- (void)doSomeSweepingWithBoolean:(jboolean)tryHarder;

- (void)elementDequeued;

- (void)queueIsEmpty;

- (void)register__WithJavaUtilConcurrentArrayBlockingQueue_Itr:(JavaUtilConcurrentArrayBlockingQueue_Itr *)itr;

- (void)removedAtWithInt:(jint)removedIndex;

- (void)takeIndexWrapped;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentArrayBlockingQueue_Itrs)

FOUNDATION_EXPORT void JavaUtilConcurrentArrayBlockingQueue_Itrs_initWithJavaUtilConcurrentArrayBlockingQueue_withJavaUtilConcurrentArrayBlockingQueue_Itr_(JavaUtilConcurrentArrayBlockingQueue_Itrs *self, JavaUtilConcurrentArrayBlockingQueue *outer$, JavaUtilConcurrentArrayBlockingQueue_Itr *initial);

FOUNDATION_EXPORT JavaUtilConcurrentArrayBlockingQueue_Itrs *new_JavaUtilConcurrentArrayBlockingQueue_Itrs_initWithJavaUtilConcurrentArrayBlockingQueue_withJavaUtilConcurrentArrayBlockingQueue_Itr_(JavaUtilConcurrentArrayBlockingQueue *outer$, JavaUtilConcurrentArrayBlockingQueue_Itr *initial) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentArrayBlockingQueue_Itrs)

#endif // _JavaUtilConcurrentArrayBlockingQueue_H_
