//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/concurrent/Phaser.java
//

#ifndef _JavaUtilConcurrentPhaser_H_
#define _JavaUtilConcurrentPhaser_H_

#include "J2ObjC_header.h"
#include "java/util/concurrent/ForkJoinPool.h"

@class JavaLangThread;
@class JavaUtilConcurrentTimeUnitEnum;

@interface JavaUtilConcurrentPhaser : NSObject

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithInt:(jint)parties;

- (instancetype)initWithJavaUtilConcurrentPhaser:(JavaUtilConcurrentPhaser *)parent;

- (instancetype)initWithJavaUtilConcurrentPhaser:(JavaUtilConcurrentPhaser *)parent
                                         withInt:(jint)parties;

- (jint)arrive;

- (jint)arriveAndAwaitAdvance;

- (jint)arriveAndDeregister;

- (jint)awaitAdvanceWithInt:(jint)phase;

- (jint)awaitAdvanceInterruptiblyWithInt:(jint)phase;

- (jint)awaitAdvanceInterruptiblyWithInt:(jint)phase
                                withLong:(jlong)timeout
      withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (jint)bulkRegisterWithInt:(jint)parties;

- (void)forceTermination;

- (jint)getArrivedParties;

- (JavaUtilConcurrentPhaser *)getParent;

- (jint)getPhase;

- (jint)getRegisteredParties;

- (JavaUtilConcurrentPhaser *)getRoot;

- (jint)getUnarrivedParties;

- (jboolean)isTerminated;

- (jint)register__;

- (NSString *)description;

#pragma mark Protected

- (jboolean)onAdvanceWithInt:(jint)phase
                     withInt:(jint)registeredParties;

@end

J2OBJC_STATIC_INIT(JavaUtilConcurrentPhaser)

FOUNDATION_EXPORT jint JavaUtilConcurrentPhaser_SPINS_PER_ARRIVAL_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentPhaser, SPINS_PER_ARRIVAL_, jint)

FOUNDATION_EXPORT void JavaUtilConcurrentPhaser_init(JavaUtilConcurrentPhaser *self);

FOUNDATION_EXPORT JavaUtilConcurrentPhaser *new_JavaUtilConcurrentPhaser_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilConcurrentPhaser_initWithInt_(JavaUtilConcurrentPhaser *self, jint parties);

FOUNDATION_EXPORT JavaUtilConcurrentPhaser *new_JavaUtilConcurrentPhaser_initWithInt_(jint parties) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilConcurrentPhaser_initWithJavaUtilConcurrentPhaser_(JavaUtilConcurrentPhaser *self, JavaUtilConcurrentPhaser *parent);

FOUNDATION_EXPORT JavaUtilConcurrentPhaser *new_JavaUtilConcurrentPhaser_initWithJavaUtilConcurrentPhaser_(JavaUtilConcurrentPhaser *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilConcurrentPhaser_initWithJavaUtilConcurrentPhaser_withInt_(JavaUtilConcurrentPhaser *self, JavaUtilConcurrentPhaser *parent, jint parties);

FOUNDATION_EXPORT JavaUtilConcurrentPhaser *new_JavaUtilConcurrentPhaser_initWithJavaUtilConcurrentPhaser_withInt_(JavaUtilConcurrentPhaser *parent, jint parties) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentPhaser)

@interface JavaUtilConcurrentPhaser_QNode : NSObject < JavaUtilConcurrentForkJoinPool_ManagedBlocker > {
 @public
  JavaUtilConcurrentPhaser *phaser_;
  jint phase_;
  jboolean interruptible_;
  jboolean timed_;
  jboolean wasInterrupted_;
  jlong nanos_;
  jlong lastTime_;
  JavaLangThread *thread_;
  JavaUtilConcurrentPhaser_QNode *next_;
}

#pragma mark Public

- (jboolean)block;

- (jboolean)isReleasable;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilConcurrentPhaser:(JavaUtilConcurrentPhaser *)phaser
                                         withInt:(jint)phase
                                     withBoolean:(jboolean)interruptible
                                     withBoolean:(jboolean)timed
                                        withLong:(jlong)nanos;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentPhaser_QNode)

J2OBJC_FIELD_SETTER(JavaUtilConcurrentPhaser_QNode, phaser_, JavaUtilConcurrentPhaser *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentPhaser_QNode, thread_, JavaLangThread *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentPhaser_QNode, next_, JavaUtilConcurrentPhaser_QNode *)

FOUNDATION_EXPORT void JavaUtilConcurrentPhaser_QNode_initWithJavaUtilConcurrentPhaser_withInt_withBoolean_withBoolean_withLong_(JavaUtilConcurrentPhaser_QNode *self, JavaUtilConcurrentPhaser *phaser, jint phase, jboolean interruptible, jboolean timed, jlong nanos);

FOUNDATION_EXPORT JavaUtilConcurrentPhaser_QNode *new_JavaUtilConcurrentPhaser_QNode_initWithJavaUtilConcurrentPhaser_withInt_withBoolean_withBoolean_withLong_(JavaUtilConcurrentPhaser *phaser, jint phase, jboolean interruptible, jboolean timed, jlong nanos) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentPhaser_QNode)

#endif // _JavaUtilConcurrentPhaser_H_
