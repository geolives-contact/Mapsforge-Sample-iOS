//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/concurrent/ForkJoinWorkerThread.java
//

#ifndef _JavaUtilConcurrentForkJoinWorkerThread_H_
#define _JavaUtilConcurrentForkJoinWorkerThread_H_

#include "J2ObjC_header.h"
#include "java/lang/Thread.h"

@class IOSObjectArray;
@class JavaLangThrowable;
@class JavaUtilConcurrentForkJoinPool;
@class JavaUtilConcurrentForkJoinTask;
@protocol JavaUtilCollection;

@interface JavaUtilConcurrentForkJoinWorkerThread : JavaLangThread {
 @public
  IOSObjectArray *queue_;
  JavaUtilConcurrentForkJoinPool *pool_;
  jint queueTop_;
  jint queueBase_;
  jint stealHint_;
  jint poolIndex_;
  jint nextWait_;
  jint eventCount_;
  jint seed_;
  jint stealCount_;
  jboolean terminate_;
  jboolean parked_;
  jboolean locallyFifo_;
  JavaUtilConcurrentForkJoinTask *currentSteal_;
  JavaUtilConcurrentForkJoinTask *currentJoin_;
}

#pragma mark Public

- (JavaUtilConcurrentForkJoinPool *)getPool;

- (jint)getPoolIndex;

- (void)run;

#pragma mark Protected

- (instancetype)initWithJavaUtilConcurrentForkJoinPool:(JavaUtilConcurrentForkJoinPool *)pool;

- (void)onStart;

- (void)onTerminationWithJavaLangThrowable:(JavaLangThrowable *)exception;

#pragma mark Package-Private

- (void)cancelTasks;

- (JavaUtilConcurrentForkJoinTask *)deqTask;

- (jint)drainTasksToWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (void)execTaskWithJavaUtilConcurrentForkJoinTask:(JavaUtilConcurrentForkJoinTask *)t;

- (jint)getEstimatedSurplusTaskCount;

- (jint)getQueueSize;

- (void)helpQuiescePool;

- (jint)joinTaskWithJavaUtilConcurrentForkJoinTask:(JavaUtilConcurrentForkJoinTask *)joinMe;

- (JavaUtilConcurrentForkJoinTask *)locallyDeqTask;

- (JavaUtilConcurrentForkJoinTask *)peekTask;

- (JavaUtilConcurrentForkJoinTask *)pollLocalTask;

- (JavaUtilConcurrentForkJoinTask *)pollTask;

- (void)pushTaskWithJavaUtilConcurrentForkJoinTask:(JavaUtilConcurrentForkJoinTask *)t;

- (jboolean)unpushTaskWithJavaUtilConcurrentForkJoinTask:(JavaUtilConcurrentForkJoinTask *)t;

@end

J2OBJC_STATIC_INIT(JavaUtilConcurrentForkJoinWorkerThread)

J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinWorkerThread, queue_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinWorkerThread, pool_, JavaUtilConcurrentForkJoinPool *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinWorkerThread, currentSteal_, JavaUtilConcurrentForkJoinTask *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinWorkerThread, currentJoin_, JavaUtilConcurrentForkJoinTask *)

FOUNDATION_EXPORT void JavaUtilConcurrentForkJoinWorkerThread_initWithJavaUtilConcurrentForkJoinPool_(JavaUtilConcurrentForkJoinWorkerThread *self, JavaUtilConcurrentForkJoinPool *pool);

FOUNDATION_EXPORT JavaUtilConcurrentForkJoinWorkerThread *new_JavaUtilConcurrentForkJoinWorkerThread_initWithJavaUtilConcurrentForkJoinPool_(JavaUtilConcurrentForkJoinPool *pool) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentForkJoinWorkerThread)

#endif // _JavaUtilConcurrentForkJoinWorkerThread_H_
