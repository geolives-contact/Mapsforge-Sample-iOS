//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/concurrent/ThreadPoolExecutor.java
//

#ifndef _JavaUtilConcurrentThreadPoolExecutor_H_
#define _JavaUtilConcurrentThreadPoolExecutor_H_

#include "J2ObjC_header.h"
#include "java/util/concurrent/AbstractExecutorService.h"
#include "java/util/concurrent/RejectedExecutionHandler.h"

@class JavaLangThread;
@class JavaLangThrowable;
@class JavaUtilConcurrentThreadPoolExecutor_Worker;
@class JavaUtilConcurrentTimeUnitEnum;
@protocol JavaLangRunnable;
@protocol JavaUtilConcurrentBlockingQueue;
@protocol JavaUtilConcurrentThreadFactory;
@protocol JavaUtilList;

@interface JavaUtilConcurrentThreadPoolExecutor : JavaUtilConcurrentAbstractExecutorService

#pragma mark Public

- (instancetype)initWithInt:(jint)corePoolSize
                    withInt:(jint)maximumPoolSize
                   withLong:(jlong)keepAliveTime
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit
withJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)workQueue;

- (instancetype)initWithInt:(jint)corePoolSize
                    withInt:(jint)maximumPoolSize
                   withLong:(jlong)keepAliveTime
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit
withJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)workQueue
withJavaUtilConcurrentRejectedExecutionHandler:(id<JavaUtilConcurrentRejectedExecutionHandler>)handler;

- (instancetype)initWithInt:(jint)corePoolSize
                    withInt:(jint)maximumPoolSize
                   withLong:(jlong)keepAliveTime
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit
withJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)workQueue
withJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory;

- (instancetype)initWithInt:(jint)corePoolSize
                    withInt:(jint)maximumPoolSize
                   withLong:(jlong)keepAliveTime
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit
withJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)workQueue
withJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory
withJavaUtilConcurrentRejectedExecutionHandler:(id<JavaUtilConcurrentRejectedExecutionHandler>)handler;

- (void)allowCoreThreadTimeOutWithBoolean:(jboolean)value;

- (jboolean)allowsCoreThreadTimeOut;

- (jboolean)awaitTerminationWithLong:(jlong)timeout
  withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command;

- (jint)getActiveCount;

- (jlong)getCompletedTaskCount;

- (jint)getCorePoolSize;

- (jlong)getKeepAliveTimeWithJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (jint)getLargestPoolSize;

- (jint)getMaximumPoolSize;

- (jint)getPoolSize;

- (id<JavaUtilConcurrentBlockingQueue>)getQueue;

- (id<JavaUtilConcurrentRejectedExecutionHandler>)getRejectedExecutionHandler;

- (jlong)getTaskCount;

- (id<JavaUtilConcurrentThreadFactory>)getThreadFactory;

- (jboolean)isShutdown;

- (jboolean)isTerminated;

- (jboolean)isTerminating;

- (jint)prestartAllCoreThreads;

- (jboolean)prestartCoreThread;

- (void)purge;

- (jboolean)removeWithJavaLangRunnable:(id<JavaLangRunnable>)task;

- (void)setCorePoolSizeWithInt:(jint)corePoolSize;

- (void)setKeepAliveTimeWithLong:(jlong)time
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (void)setMaximumPoolSizeWithInt:(jint)maximumPoolSize;

- (void)setRejectedExecutionHandlerWithJavaUtilConcurrentRejectedExecutionHandler:(id<JavaUtilConcurrentRejectedExecutionHandler>)handler;

- (void)setThreadFactoryWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory;

- (void)shutdown;

- (id<JavaUtilList>)shutdownNow;

- (NSString *)description;

#pragma mark Protected

- (void)afterExecuteWithJavaLangRunnable:(id<JavaLangRunnable>)r
                   withJavaLangThrowable:(JavaLangThrowable *)t;

- (void)beforeExecuteWithJavaLangThread:(JavaLangThread *)t
                   withJavaLangRunnable:(id<JavaLangRunnable>)r;

- (void)dealloc;

- (void)terminated;

#pragma mark Package-Private

- (void)ensurePrestart;

- (jboolean)isRunningOrShutdownWithBoolean:(jboolean)shutdownOK;

- (void)onShutdown;

- (void)rejectWithJavaLangRunnable:(id<JavaLangRunnable>)command;

- (void)runWorkerWithJavaUtilConcurrentThreadPoolExecutor_Worker:(JavaUtilConcurrentThreadPoolExecutor_Worker *)w;

- (void)tryTerminate;

@end

J2OBJC_STATIC_INIT(JavaUtilConcurrentThreadPoolExecutor)

FOUNDATION_EXPORT void JavaUtilConcurrentThreadPoolExecutor_initWithInt_withInt_withLong_withJavaUtilConcurrentTimeUnitEnum_withJavaUtilConcurrentBlockingQueue_(JavaUtilConcurrentThreadPoolExecutor *self, jint corePoolSize, jint maximumPoolSize, jlong keepAliveTime, JavaUtilConcurrentTimeUnitEnum *unit, id<JavaUtilConcurrentBlockingQueue> workQueue);

FOUNDATION_EXPORT JavaUtilConcurrentThreadPoolExecutor *new_JavaUtilConcurrentThreadPoolExecutor_initWithInt_withInt_withLong_withJavaUtilConcurrentTimeUnitEnum_withJavaUtilConcurrentBlockingQueue_(jint corePoolSize, jint maximumPoolSize, jlong keepAliveTime, JavaUtilConcurrentTimeUnitEnum *unit, id<JavaUtilConcurrentBlockingQueue> workQueue) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilConcurrentThreadPoolExecutor_initWithInt_withInt_withLong_withJavaUtilConcurrentTimeUnitEnum_withJavaUtilConcurrentBlockingQueue_withJavaUtilConcurrentThreadFactory_(JavaUtilConcurrentThreadPoolExecutor *self, jint corePoolSize, jint maximumPoolSize, jlong keepAliveTime, JavaUtilConcurrentTimeUnitEnum *unit, id<JavaUtilConcurrentBlockingQueue> workQueue, id<JavaUtilConcurrentThreadFactory> threadFactory);

FOUNDATION_EXPORT JavaUtilConcurrentThreadPoolExecutor *new_JavaUtilConcurrentThreadPoolExecutor_initWithInt_withInt_withLong_withJavaUtilConcurrentTimeUnitEnum_withJavaUtilConcurrentBlockingQueue_withJavaUtilConcurrentThreadFactory_(jint corePoolSize, jint maximumPoolSize, jlong keepAliveTime, JavaUtilConcurrentTimeUnitEnum *unit, id<JavaUtilConcurrentBlockingQueue> workQueue, id<JavaUtilConcurrentThreadFactory> threadFactory) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilConcurrentThreadPoolExecutor_initWithInt_withInt_withLong_withJavaUtilConcurrentTimeUnitEnum_withJavaUtilConcurrentBlockingQueue_withJavaUtilConcurrentRejectedExecutionHandler_(JavaUtilConcurrentThreadPoolExecutor *self, jint corePoolSize, jint maximumPoolSize, jlong keepAliveTime, JavaUtilConcurrentTimeUnitEnum *unit, id<JavaUtilConcurrentBlockingQueue> workQueue, id<JavaUtilConcurrentRejectedExecutionHandler> handler);

FOUNDATION_EXPORT JavaUtilConcurrentThreadPoolExecutor *new_JavaUtilConcurrentThreadPoolExecutor_initWithInt_withInt_withLong_withJavaUtilConcurrentTimeUnitEnum_withJavaUtilConcurrentBlockingQueue_withJavaUtilConcurrentRejectedExecutionHandler_(jint corePoolSize, jint maximumPoolSize, jlong keepAliveTime, JavaUtilConcurrentTimeUnitEnum *unit, id<JavaUtilConcurrentBlockingQueue> workQueue, id<JavaUtilConcurrentRejectedExecutionHandler> handler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilConcurrentThreadPoolExecutor_initWithInt_withInt_withLong_withJavaUtilConcurrentTimeUnitEnum_withJavaUtilConcurrentBlockingQueue_withJavaUtilConcurrentThreadFactory_withJavaUtilConcurrentRejectedExecutionHandler_(JavaUtilConcurrentThreadPoolExecutor *self, jint corePoolSize, jint maximumPoolSize, jlong keepAliveTime, JavaUtilConcurrentTimeUnitEnum *unit, id<JavaUtilConcurrentBlockingQueue> workQueue, id<JavaUtilConcurrentThreadFactory> threadFactory, id<JavaUtilConcurrentRejectedExecutionHandler> handler);

FOUNDATION_EXPORT JavaUtilConcurrentThreadPoolExecutor *new_JavaUtilConcurrentThreadPoolExecutor_initWithInt_withInt_withLong_withJavaUtilConcurrentTimeUnitEnum_withJavaUtilConcurrentBlockingQueue_withJavaUtilConcurrentThreadFactory_withJavaUtilConcurrentRejectedExecutionHandler_(jint corePoolSize, jint maximumPoolSize, jlong keepAliveTime, JavaUtilConcurrentTimeUnitEnum *unit, id<JavaUtilConcurrentBlockingQueue> workQueue, id<JavaUtilConcurrentThreadFactory> threadFactory, id<JavaUtilConcurrentRejectedExecutionHandler> handler) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentThreadPoolExecutor)

@interface JavaUtilConcurrentThreadPoolExecutor_CallerRunsPolicy : NSObject < JavaUtilConcurrentRejectedExecutionHandler >

#pragma mark Public

- (instancetype)init;

- (void)rejectedExecutionWithJavaLangRunnable:(id<JavaLangRunnable>)r
     withJavaUtilConcurrentThreadPoolExecutor:(JavaUtilConcurrentThreadPoolExecutor *)e;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentThreadPoolExecutor_CallerRunsPolicy)

FOUNDATION_EXPORT void JavaUtilConcurrentThreadPoolExecutor_CallerRunsPolicy_init(JavaUtilConcurrentThreadPoolExecutor_CallerRunsPolicy *self);

FOUNDATION_EXPORT JavaUtilConcurrentThreadPoolExecutor_CallerRunsPolicy *new_JavaUtilConcurrentThreadPoolExecutor_CallerRunsPolicy_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentThreadPoolExecutor_CallerRunsPolicy)

@interface JavaUtilConcurrentThreadPoolExecutor_AbortPolicy : NSObject < JavaUtilConcurrentRejectedExecutionHandler >

#pragma mark Public

- (instancetype)init;

- (void)rejectedExecutionWithJavaLangRunnable:(id<JavaLangRunnable>)r
     withJavaUtilConcurrentThreadPoolExecutor:(JavaUtilConcurrentThreadPoolExecutor *)e;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentThreadPoolExecutor_AbortPolicy)

FOUNDATION_EXPORT void JavaUtilConcurrentThreadPoolExecutor_AbortPolicy_init(JavaUtilConcurrentThreadPoolExecutor_AbortPolicy *self);

FOUNDATION_EXPORT JavaUtilConcurrentThreadPoolExecutor_AbortPolicy *new_JavaUtilConcurrentThreadPoolExecutor_AbortPolicy_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentThreadPoolExecutor_AbortPolicy)

@interface JavaUtilConcurrentThreadPoolExecutor_DiscardPolicy : NSObject < JavaUtilConcurrentRejectedExecutionHandler >

#pragma mark Public

- (instancetype)init;

- (void)rejectedExecutionWithJavaLangRunnable:(id<JavaLangRunnable>)r
     withJavaUtilConcurrentThreadPoolExecutor:(JavaUtilConcurrentThreadPoolExecutor *)e;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentThreadPoolExecutor_DiscardPolicy)

FOUNDATION_EXPORT void JavaUtilConcurrentThreadPoolExecutor_DiscardPolicy_init(JavaUtilConcurrentThreadPoolExecutor_DiscardPolicy *self);

FOUNDATION_EXPORT JavaUtilConcurrentThreadPoolExecutor_DiscardPolicy *new_JavaUtilConcurrentThreadPoolExecutor_DiscardPolicy_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentThreadPoolExecutor_DiscardPolicy)

@interface JavaUtilConcurrentThreadPoolExecutor_DiscardOldestPolicy : NSObject < JavaUtilConcurrentRejectedExecutionHandler >

#pragma mark Public

- (instancetype)init;

- (void)rejectedExecutionWithJavaLangRunnable:(id<JavaLangRunnable>)r
     withJavaUtilConcurrentThreadPoolExecutor:(JavaUtilConcurrentThreadPoolExecutor *)e;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentThreadPoolExecutor_DiscardOldestPolicy)

FOUNDATION_EXPORT void JavaUtilConcurrentThreadPoolExecutor_DiscardOldestPolicy_init(JavaUtilConcurrentThreadPoolExecutor_DiscardOldestPolicy *self);

FOUNDATION_EXPORT JavaUtilConcurrentThreadPoolExecutor_DiscardOldestPolicy *new_JavaUtilConcurrentThreadPoolExecutor_DiscardOldestPolicy_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentThreadPoolExecutor_DiscardOldestPolicy)

#endif // _JavaUtilConcurrentThreadPoolExecutor_H_
