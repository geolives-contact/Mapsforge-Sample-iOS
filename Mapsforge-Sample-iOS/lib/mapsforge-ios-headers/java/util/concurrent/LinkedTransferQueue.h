//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/concurrent/LinkedTransferQueue.java
//

#ifndef _JavaUtilConcurrentLinkedTransferQueue_H_
#define _JavaUtilConcurrentLinkedTransferQueue_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "java/util/AbstractQueue.h"
#include "java/util/Iterator.h"
#include "java/util/concurrent/TransferQueue.h"

@class JavaLangThread;
@class JavaUtilConcurrentLinkedTransferQueue_Node;
@class JavaUtilConcurrentTimeUnitEnum;
@protocol JavaUtilCollection;

#define JavaUtilConcurrentLinkedTransferQueue_SWEEP_THRESHOLD 32

@interface JavaUtilConcurrentLinkedTransferQueue : JavaUtilAbstractQueue < JavaUtilConcurrentTransferQueue, JavaIoSerializable > {
 @public
  JavaUtilConcurrentLinkedTransferQueue_Node *head_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (jboolean)addWithId:(id)e;

- (jboolean)containsWithId:(id)o;

- (jint)drainToWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (jint)drainToWithJavaUtilCollection:(id<JavaUtilCollection>)c
                              withInt:(jint)maxElements;

- (jint)getWaitingConsumerCount;

- (jboolean)hasWaitingConsumer;

- (jboolean)isEmpty;

- (id<JavaUtilIterator>)iterator;

- (jboolean)offerWithId:(id)e;

- (jboolean)offerWithId:(id)e
               withLong:(jlong)timeout
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (id)peek;

- (id)poll;

- (id)pollWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (void)putWithId:(id)e;

- (jint)remainingCapacity;

- (jboolean)removeWithId:(id)o;

- (jint)size;

- (id)take;

- (void)transferWithId:(id)e;

- (jboolean)tryTransferWithId:(id)e;

- (jboolean)tryTransferWithId:(id)e
                     withLong:(jlong)timeout
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

#pragma mark Package-Private

+ (id)castWithId:(id)item;

- (JavaUtilConcurrentLinkedTransferQueue_Node *)succWithJavaUtilConcurrentLinkedTransferQueue_Node:(JavaUtilConcurrentLinkedTransferQueue_Node *)p;

- (void)unspliceWithJavaUtilConcurrentLinkedTransferQueue_Node:(JavaUtilConcurrentLinkedTransferQueue_Node *)pred
                withJavaUtilConcurrentLinkedTransferQueue_Node:(JavaUtilConcurrentLinkedTransferQueue_Node *)s;


@end

J2OBJC_STATIC_INIT(JavaUtilConcurrentLinkedTransferQueue)

J2OBJC_FIELD_SETTER(JavaUtilConcurrentLinkedTransferQueue, head_, JavaUtilConcurrentLinkedTransferQueue_Node *)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLinkedTransferQueue, SWEEP_THRESHOLD, jint)

FOUNDATION_EXPORT id JavaUtilConcurrentLinkedTransferQueue_castWithId_(id item);

FOUNDATION_EXPORT void JavaUtilConcurrentLinkedTransferQueue_init(JavaUtilConcurrentLinkedTransferQueue *self);

FOUNDATION_EXPORT JavaUtilConcurrentLinkedTransferQueue *new_JavaUtilConcurrentLinkedTransferQueue_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilConcurrentLinkedTransferQueue_initWithJavaUtilCollection_(JavaUtilConcurrentLinkedTransferQueue *self, id<JavaUtilCollection> c);

FOUNDATION_EXPORT JavaUtilConcurrentLinkedTransferQueue *new_JavaUtilConcurrentLinkedTransferQueue_initWithJavaUtilCollection_(id<JavaUtilCollection> c) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentLinkedTransferQueue)

@interface JavaUtilConcurrentLinkedTransferQueue_Node : NSObject {
 @public
  jboolean isData_;
  id item_;
  JavaUtilConcurrentLinkedTransferQueue_Node *next_;
  JavaLangThread *waiter_;
}

#pragma mark Package-Private

- (instancetype)initWithId:(id)item
               withBoolean:(jboolean)isData;

- (jboolean)cannotPrecedeWithBoolean:(jboolean)haveData;

- (jboolean)casItemWithId:(id)cmp
                   withId:(id)val;

- (jboolean)casNextWithJavaUtilConcurrentLinkedTransferQueue_Node:(JavaUtilConcurrentLinkedTransferQueue_Node *)cmp
                   withJavaUtilConcurrentLinkedTransferQueue_Node:(JavaUtilConcurrentLinkedTransferQueue_Node *)val;

- (void)forgetContents;

- (void)forgetNext;

- (jboolean)isMatched;

- (jboolean)isUnmatchedRequest;

- (jboolean)tryMatchData;

@end

J2OBJC_STATIC_INIT(JavaUtilConcurrentLinkedTransferQueue_Node)

J2OBJC_FIELD_SETTER(JavaUtilConcurrentLinkedTransferQueue_Node, item_, id)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentLinkedTransferQueue_Node, next_, JavaUtilConcurrentLinkedTransferQueue_Node *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentLinkedTransferQueue_Node, waiter_, JavaLangThread *)

FOUNDATION_EXPORT void JavaUtilConcurrentLinkedTransferQueue_Node_initWithId_withBoolean_(JavaUtilConcurrentLinkedTransferQueue_Node *self, id item, jboolean isData);

FOUNDATION_EXPORT JavaUtilConcurrentLinkedTransferQueue_Node *new_JavaUtilConcurrentLinkedTransferQueue_Node_initWithId_withBoolean_(id item, jboolean isData) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentLinkedTransferQueue_Node)

@interface JavaUtilConcurrentLinkedTransferQueue_Itr : NSObject < JavaUtilIterator >

#pragma mark Public

- (jboolean)hasNext;

- (id)next;

- (void)remove;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilConcurrentLinkedTransferQueue:(JavaUtilConcurrentLinkedTransferQueue *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentLinkedTransferQueue_Itr)

FOUNDATION_EXPORT void JavaUtilConcurrentLinkedTransferQueue_Itr_initWithJavaUtilConcurrentLinkedTransferQueue_(JavaUtilConcurrentLinkedTransferQueue_Itr *self, JavaUtilConcurrentLinkedTransferQueue *outer$);

FOUNDATION_EXPORT JavaUtilConcurrentLinkedTransferQueue_Itr *new_JavaUtilConcurrentLinkedTransferQueue_Itr_initWithJavaUtilConcurrentLinkedTransferQueue_(JavaUtilConcurrentLinkedTransferQueue *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentLinkedTransferQueue_Itr)

#endif // _JavaUtilConcurrentLinkedTransferQueue_H_
