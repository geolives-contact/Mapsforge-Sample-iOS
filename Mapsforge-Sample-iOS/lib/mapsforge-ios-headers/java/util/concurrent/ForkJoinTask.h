//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/concurrent/ForkJoinTask.java
//

#ifndef _JavaUtilConcurrentForkJoinTask_H_
#define _JavaUtilConcurrentForkJoinTask_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "java/lang/ref/WeakReference.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/RunnableFuture.h"

@class IOSObjectArray;
@class JavaLangThrowable;
@class JavaUtilConcurrentForkJoinPool;
@class JavaUtilConcurrentTimeUnitEnum;
@protocol JavaLangRunnable;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentCallable;

@interface JavaUtilConcurrentForkJoinTask : NSObject < JavaUtilConcurrentFuture, JavaIoSerializable > {
 @public
  jint status_;
}

#pragma mark Public

- (instancetype)init;

+ (JavaUtilConcurrentForkJoinTask *)adaptWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable;

+ (JavaUtilConcurrentForkJoinTask *)adaptWithJavaLangRunnable:(id<JavaLangRunnable>)runnable;

+ (JavaUtilConcurrentForkJoinTask *)adaptWithJavaLangRunnable:(id<JavaLangRunnable>)runnable
                                                       withId:(id)result;

- (jboolean)cancelWithBoolean:(jboolean)mayInterruptIfRunning;

- (void)completeWithId:(id)value;

- (void)completeExceptionallyWithJavaLangThrowable:(JavaLangThrowable *)ex;

- (JavaUtilConcurrentForkJoinTask *)fork;

- (id)get;

- (id)getWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (JavaLangThrowable *)getException;

+ (JavaUtilConcurrentForkJoinPool *)getPool;

+ (jint)getQueuedTaskCount;

- (id)getRawResult;

+ (jint)getSurplusQueuedTaskCount;

+ (void)helpQuiesce;

+ (jboolean)inForkJoinPool;

- (id)invoke;

+ (id<JavaUtilCollection>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)tasks;

+ (void)invokeAllWithJavaUtilConcurrentForkJoinTaskArray:(IOSObjectArray *)tasks;

+ (void)invokeAllWithJavaUtilConcurrentForkJoinTask:(JavaUtilConcurrentForkJoinTask *)t1
                 withJavaUtilConcurrentForkJoinTask:(JavaUtilConcurrentForkJoinTask *)t2;

- (jboolean)isCancelled;

- (jboolean)isCompletedAbnormally;

- (jboolean)isCompletedNormally;

- (jboolean)isDone;

- (id)join;

- (void)quietlyInvoke;

- (void)quietlyJoin;

- (void)reinitialize;

- (jboolean)tryUnfork;

#pragma mark Protected

- (jboolean)exec;

+ (JavaUtilConcurrentForkJoinTask *)peekNextLocalTask;

+ (JavaUtilConcurrentForkJoinTask *)pollNextLocalTask;

+ (JavaUtilConcurrentForkJoinTask *)pollTask;

- (void)setRawResultWithId:(id)value;

#pragma mark Package-Private

- (void)cancelIgnoringExceptions;

- (void)doExec;

+ (void)helpExpungeStaleExceptions;

- (void)tryAwaitDoneWithLong:(jlong)millis;

@end

J2OBJC_STATIC_INIT(JavaUtilConcurrentForkJoinTask)

FOUNDATION_EXPORT void JavaUtilConcurrentForkJoinTask_helpExpungeStaleExceptions();

FOUNDATION_EXPORT void JavaUtilConcurrentForkJoinTask_invokeAllWithJavaUtilConcurrentForkJoinTask_withJavaUtilConcurrentForkJoinTask_(JavaUtilConcurrentForkJoinTask *t1, JavaUtilConcurrentForkJoinTask *t2);

FOUNDATION_EXPORT void JavaUtilConcurrentForkJoinTask_invokeAllWithJavaUtilConcurrentForkJoinTaskArray_(IOSObjectArray *tasks);

FOUNDATION_EXPORT id<JavaUtilCollection> JavaUtilConcurrentForkJoinTask_invokeAllWithJavaUtilCollection_(id<JavaUtilCollection> tasks);

FOUNDATION_EXPORT void JavaUtilConcurrentForkJoinTask_helpQuiesce();

FOUNDATION_EXPORT JavaUtilConcurrentForkJoinPool *JavaUtilConcurrentForkJoinTask_getPool();

FOUNDATION_EXPORT jboolean JavaUtilConcurrentForkJoinTask_inForkJoinPool();

FOUNDATION_EXPORT jint JavaUtilConcurrentForkJoinTask_getQueuedTaskCount();

FOUNDATION_EXPORT jint JavaUtilConcurrentForkJoinTask_getSurplusQueuedTaskCount();

FOUNDATION_EXPORT JavaUtilConcurrentForkJoinTask *JavaUtilConcurrentForkJoinTask_peekNextLocalTask();

FOUNDATION_EXPORT JavaUtilConcurrentForkJoinTask *JavaUtilConcurrentForkJoinTask_pollNextLocalTask();

FOUNDATION_EXPORT JavaUtilConcurrentForkJoinTask *JavaUtilConcurrentForkJoinTask_pollTask();

FOUNDATION_EXPORT JavaUtilConcurrentForkJoinTask *JavaUtilConcurrentForkJoinTask_adaptWithJavaLangRunnable_(id<JavaLangRunnable> runnable);

FOUNDATION_EXPORT JavaUtilConcurrentForkJoinTask *JavaUtilConcurrentForkJoinTask_adaptWithJavaLangRunnable_withId_(id<JavaLangRunnable> runnable, id result);

FOUNDATION_EXPORT JavaUtilConcurrentForkJoinTask *JavaUtilConcurrentForkJoinTask_adaptWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> callable);

FOUNDATION_EXPORT void JavaUtilConcurrentForkJoinTask_init(JavaUtilConcurrentForkJoinTask *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentForkJoinTask)

@interface JavaUtilConcurrentForkJoinTask_ExceptionNode : JavaLangRefWeakReference {
 @public
  JavaLangThrowable *ex_;
  JavaUtilConcurrentForkJoinTask_ExceptionNode *next_;
  jlong thrower_;
}

#pragma mark Package-Private

- (instancetype)initWithJavaUtilConcurrentForkJoinTask:(JavaUtilConcurrentForkJoinTask *)task
                                 withJavaLangThrowable:(JavaLangThrowable *)ex
      withJavaUtilConcurrentForkJoinTask_ExceptionNode:(JavaUtilConcurrentForkJoinTask_ExceptionNode *)next;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentForkJoinTask_ExceptionNode)

J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinTask_ExceptionNode, ex_, JavaLangThrowable *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinTask_ExceptionNode, next_, JavaUtilConcurrentForkJoinTask_ExceptionNode *)

FOUNDATION_EXPORT void JavaUtilConcurrentForkJoinTask_ExceptionNode_initWithJavaUtilConcurrentForkJoinTask_withJavaLangThrowable_withJavaUtilConcurrentForkJoinTask_ExceptionNode_(JavaUtilConcurrentForkJoinTask_ExceptionNode *self, JavaUtilConcurrentForkJoinTask *task, JavaLangThrowable *ex, JavaUtilConcurrentForkJoinTask_ExceptionNode *next);

FOUNDATION_EXPORT JavaUtilConcurrentForkJoinTask_ExceptionNode *new_JavaUtilConcurrentForkJoinTask_ExceptionNode_initWithJavaUtilConcurrentForkJoinTask_withJavaLangThrowable_withJavaUtilConcurrentForkJoinTask_ExceptionNode_(JavaUtilConcurrentForkJoinTask *task, JavaLangThrowable *ex, JavaUtilConcurrentForkJoinTask_ExceptionNode *next) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentForkJoinTask_ExceptionNode)

@interface JavaUtilConcurrentForkJoinTask_AdaptedRunnable : JavaUtilConcurrentForkJoinTask < JavaUtilConcurrentRunnableFuture > {
 @public
  id<JavaLangRunnable> runnable_;
  id resultOnCompletion_;
  id result_;
}

#pragma mark Public

- (jboolean)exec;

- (id)getRawResult;

- (void)run;

- (void)setRawResultWithId:(id)v;

#pragma mark Package-Private

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)runnable
                                  withId:(id)result;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentForkJoinTask_AdaptedRunnable)

J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinTask_AdaptedRunnable, runnable_, id<JavaLangRunnable>)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinTask_AdaptedRunnable, resultOnCompletion_, id)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinTask_AdaptedRunnable, result_, id)

FOUNDATION_EXPORT void JavaUtilConcurrentForkJoinTask_AdaptedRunnable_initWithJavaLangRunnable_withId_(JavaUtilConcurrentForkJoinTask_AdaptedRunnable *self, id<JavaLangRunnable> runnable, id result);

FOUNDATION_EXPORT JavaUtilConcurrentForkJoinTask_AdaptedRunnable *new_JavaUtilConcurrentForkJoinTask_AdaptedRunnable_initWithJavaLangRunnable_withId_(id<JavaLangRunnable> runnable, id result) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentForkJoinTask_AdaptedRunnable)

@interface JavaUtilConcurrentForkJoinTask_AdaptedCallable : JavaUtilConcurrentForkJoinTask < JavaUtilConcurrentRunnableFuture > {
 @public
  id<JavaUtilConcurrentCallable> callable_;
  id result_;
}

#pragma mark Public

- (jboolean)exec;

- (id)getRawResult;

- (void)run;

- (void)setRawResultWithId:(id)v;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentForkJoinTask_AdaptedCallable)

J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinTask_AdaptedCallable, callable_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinTask_AdaptedCallable, result_, id)

FOUNDATION_EXPORT void JavaUtilConcurrentForkJoinTask_AdaptedCallable_initWithJavaUtilConcurrentCallable_(JavaUtilConcurrentForkJoinTask_AdaptedCallable *self, id<JavaUtilConcurrentCallable> callable);

FOUNDATION_EXPORT JavaUtilConcurrentForkJoinTask_AdaptedCallable *new_JavaUtilConcurrentForkJoinTask_AdaptedCallable_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> callable) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentForkJoinTask_AdaptedCallable)

#endif // _JavaUtilConcurrentForkJoinTask_H_
