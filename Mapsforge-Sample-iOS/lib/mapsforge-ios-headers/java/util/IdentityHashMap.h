//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/IdentityHashMap.java
//

#ifndef _JavaUtilIdentityHashMap_H_
#define _JavaUtilIdentityHashMap_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "java/util/AbstractCollection.h"
#include "java/util/AbstractMap.h"
#include "java/util/AbstractSet.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/MapEntry.h"

@class IOSObjectArray;
@protocol JavaUtilCollection;
@protocol JavaUtilSet;

@interface JavaUtilIdentityHashMap : JavaUtilAbstractMap < JavaUtilMap, JavaIoSerializable, NSCopying > {
 @public
  IOSObjectArray *elementData_;
  jint size__;
  jint threshold_;
  jint modCount_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithInt:(jint)maxSize;

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map;

- (void)clear;

- (id)clone;

- (jboolean)containsKeyWithId:(id)key;

- (jboolean)containsValueWithId:(id)value;

- (id<JavaUtilSet>)entrySet;

- (jboolean)isEqual:(id)object;

- (id)getWithId:(id)key;

- (jboolean)isEmpty;

- (id<JavaUtilSet>)keySet;

- (id)putWithId:(id)key
         withId:(id)value;

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)map;

- (id)removeWithId:(id)key;

- (jint)size;

- (id<JavaUtilCollection>)values;

@end

J2OBJC_STATIC_INIT(JavaUtilIdentityHashMap)

J2OBJC_FIELD_SETTER(JavaUtilIdentityHashMap, elementData_, IOSObjectArray *)

FOUNDATION_EXPORT void JavaUtilIdentityHashMap_init(JavaUtilIdentityHashMap *self);

FOUNDATION_EXPORT JavaUtilIdentityHashMap *new_JavaUtilIdentityHashMap_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilIdentityHashMap_initWithInt_(JavaUtilIdentityHashMap *self, jint maxSize);

FOUNDATION_EXPORT JavaUtilIdentityHashMap *new_JavaUtilIdentityHashMap_initWithInt_(jint maxSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilIdentityHashMap_initWithJavaUtilMap_(JavaUtilIdentityHashMap *self, id<JavaUtilMap> map);

FOUNDATION_EXPORT JavaUtilIdentityHashMap *new_JavaUtilIdentityHashMap_initWithJavaUtilMap_(id<JavaUtilMap> map) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilIdentityHashMap)

@interface JavaUtilIdentityHashMap_IdentityHashMapEntry : JavaUtilMapEntry

#pragma mark Public

- (id)clone;

- (jboolean)isEqual:(id)object;

- (NSUInteger)hash;

- (id)setValueWithId:(id)object;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilIdentityHashMap:(JavaUtilIdentityHashMap *)map
                                         withId:(id)theKey
                                         withId:(id)theValue;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilIdentityHashMap_IdentityHashMapEntry)

FOUNDATION_EXPORT void JavaUtilIdentityHashMap_IdentityHashMapEntry_initWithJavaUtilIdentityHashMap_withId_withId_(JavaUtilIdentityHashMap_IdentityHashMapEntry *self, JavaUtilIdentityHashMap *map, id theKey, id theValue);

FOUNDATION_EXPORT JavaUtilIdentityHashMap_IdentityHashMapEntry *new_JavaUtilIdentityHashMap_IdentityHashMapEntry_initWithJavaUtilIdentityHashMap_withId_withId_(JavaUtilIdentityHashMap *map, id theKey, id theValue) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilIdentityHashMap_IdentityHashMapEntry)

@interface JavaUtilIdentityHashMap_IdentityHashMapIterator : NSObject < JavaUtilIterator > {
 @public
  JavaUtilIdentityHashMap *associatedMap_;
  jint expectedModCount_;
  id<JavaUtilMapEntry_Type> type_;
  jboolean canRemove_;
}

#pragma mark Public

- (jboolean)hasNext;

- (id)next;

- (void)remove;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilMapEntry_Type:(id<JavaUtilMapEntry_Type>)value
                  withJavaUtilIdentityHashMap:(JavaUtilIdentityHashMap *)hm;

- (void)checkConcurrentMod;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilIdentityHashMap_IdentityHashMapIterator)

J2OBJC_FIELD_SETTER(JavaUtilIdentityHashMap_IdentityHashMapIterator, associatedMap_, JavaUtilIdentityHashMap *)
J2OBJC_FIELD_SETTER(JavaUtilIdentityHashMap_IdentityHashMapIterator, type_, id<JavaUtilMapEntry_Type>)

FOUNDATION_EXPORT void JavaUtilIdentityHashMap_IdentityHashMapIterator_initWithJavaUtilMapEntry_Type_withJavaUtilIdentityHashMap_(JavaUtilIdentityHashMap_IdentityHashMapIterator *self, id<JavaUtilMapEntry_Type> value, JavaUtilIdentityHashMap *hm);

FOUNDATION_EXPORT JavaUtilIdentityHashMap_IdentityHashMapIterator *new_JavaUtilIdentityHashMap_IdentityHashMapIterator_initWithJavaUtilMapEntry_Type_withJavaUtilIdentityHashMap_(id<JavaUtilMapEntry_Type> value, JavaUtilIdentityHashMap *hm) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilIdentityHashMap_IdentityHashMapIterator)

@interface JavaUtilIdentityHashMap_IdentityHashMapEntrySet : JavaUtilAbstractSet

#pragma mark Public

- (instancetype)initWithJavaUtilIdentityHashMap:(JavaUtilIdentityHashMap *)hm;

- (void)clear;

- (jboolean)containsWithId:(id)object;

- (id<JavaUtilIterator>)iterator;

- (jboolean)removeWithId:(id)object;

- (jint)size;

#pragma mark Package-Private

- (JavaUtilIdentityHashMap *)hashMap;


@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilIdentityHashMap_IdentityHashMapEntrySet)

FOUNDATION_EXPORT void JavaUtilIdentityHashMap_IdentityHashMapEntrySet_initWithJavaUtilIdentityHashMap_(JavaUtilIdentityHashMap_IdentityHashMapEntrySet *self, JavaUtilIdentityHashMap *hm);

FOUNDATION_EXPORT JavaUtilIdentityHashMap_IdentityHashMapEntrySet *new_JavaUtilIdentityHashMap_IdentityHashMapEntrySet_initWithJavaUtilIdentityHashMap_(JavaUtilIdentityHashMap *hm) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilIdentityHashMap_IdentityHashMapEntrySet)

@interface JavaUtilIdentityHashMap_KeySet : JavaUtilAbstractSet

#pragma mark Public

- (void)clear;

- (jboolean)containsWithId:(id)object;

- (id<JavaUtilIterator>)iterator;

- (jboolean)removeWithId:(id)key;

- (jint)size;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilIdentityHashMap:(JavaUtilIdentityHashMap *)outer$;


@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilIdentityHashMap_KeySet)

FOUNDATION_EXPORT void JavaUtilIdentityHashMap_KeySet_initWithJavaUtilIdentityHashMap_(JavaUtilIdentityHashMap_KeySet *self, JavaUtilIdentityHashMap *outer$);

FOUNDATION_EXPORT JavaUtilIdentityHashMap_KeySet *new_JavaUtilIdentityHashMap_KeySet_initWithJavaUtilIdentityHashMap_(JavaUtilIdentityHashMap *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilIdentityHashMap_KeySet)

@interface JavaUtilIdentityHashMap_ValuesCollection : JavaUtilAbstractCollection

#pragma mark Public

- (void)clear;

- (jboolean)containsWithId:(id)object;

- (id<JavaUtilIterator>)iterator;

- (jboolean)removeWithId:(id)object;

- (jint)size;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilIdentityHashMap:(JavaUtilIdentityHashMap *)outer$;


@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilIdentityHashMap_ValuesCollection)

FOUNDATION_EXPORT void JavaUtilIdentityHashMap_ValuesCollection_initWithJavaUtilIdentityHashMap_(JavaUtilIdentityHashMap_ValuesCollection *self, JavaUtilIdentityHashMap *outer$);

FOUNDATION_EXPORT JavaUtilIdentityHashMap_ValuesCollection *new_JavaUtilIdentityHashMap_ValuesCollection_initWithJavaUtilIdentityHashMap_(JavaUtilIdentityHashMap *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilIdentityHashMap_ValuesCollection)

#endif // _JavaUtilIdentityHashMap_H_
