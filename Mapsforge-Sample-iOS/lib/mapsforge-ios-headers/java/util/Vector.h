//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/Vector.java
//

#ifndef _JavaUtilVector_H_
#define _JavaUtilVector_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "java/util/AbstractList.h"
#include "java/util/List.h"
#include "java/util/RandomAccess.h"

@class IOSObjectArray;
@protocol JavaUtilCollection;
@protocol JavaUtilEnumeration;

@interface JavaUtilVector : JavaUtilAbstractList < JavaUtilList, JavaUtilRandomAccess, NSCopying, JavaIoSerializable > {
 @public
  jint elementCount_;
  IOSObjectArray *elementData_;
  jint capacityIncrement_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

- (instancetype)initWithInt:(jint)capacity;

- (instancetype)initWithInt:(jint)capacity
                    withInt:(jint)capacityIncrement;

- (jboolean)addWithId:(id)object;

- (void)addWithInt:(jint)location
            withId:(id)object;

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

- (jboolean)addAllWithInt:(jint)location
   withJavaUtilCollection:(id<JavaUtilCollection>)collection;

- (void)addElementWithId:(id)object;

- (jint)capacity;

- (void)clear;

- (id)clone;

- (jboolean)containsWithId:(id)object;

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

- (void)copyIntoWithNSObjectArray:(IOSObjectArray *)elements OBJC_METHOD_FAMILY_NONE;

- (id)elementAtWithInt:(jint)location;

- (id<JavaUtilEnumeration>)elements;

- (void)ensureCapacityWithInt:(jint)minimumCapacity;

- (jboolean)isEqual:(id)object;

- (id)firstElement;

- (id)getWithInt:(jint)location;

- (NSUInteger)hash;

- (jint)indexOfWithId:(id)object;

- (jint)indexOfWithId:(id)object
              withInt:(jint)location;

- (void)insertElementAtWithId:(id)object
                      withInt:(jint)location;

- (jboolean)isEmpty;

- (id)lastElement;

- (jint)lastIndexOfWithId:(id)object;

- (jint)lastIndexOfWithId:(id)object
                  withInt:(jint)location;

- (id)removeWithInt:(jint)location;

- (jboolean)removeWithId:(id)object;

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

- (void)removeAllElements;

- (jboolean)removeElementWithId:(id)object;

- (void)removeElementAtWithInt:(jint)location;

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

- (id)setWithInt:(jint)location
          withId:(id)object;

- (void)setElementAtWithId:(id)object
                   withInt:(jint)location;

- (void)setSizeWithInt:(jint)length;

- (jint)size;

- (id<JavaUtilList>)subListWithInt:(jint)start
                           withInt:(jint)end;

- (IOSObjectArray *)toArray;

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)contents;

- (NSString *)description;

- (void)trimToSize;

#pragma mark Protected

- (void)removeRangeWithInt:(jint)start
                   withInt:(jint)end;

#pragma mark Package-Private


@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilVector)

J2OBJC_FIELD_SETTER(JavaUtilVector, elementData_, IOSObjectArray *)

FOUNDATION_EXPORT void JavaUtilVector_init(JavaUtilVector *self);

FOUNDATION_EXPORT JavaUtilVector *new_JavaUtilVector_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilVector_initWithInt_(JavaUtilVector *self, jint capacity);

FOUNDATION_EXPORT JavaUtilVector *new_JavaUtilVector_initWithInt_(jint capacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilVector_initWithInt_withInt_(JavaUtilVector *self, jint capacity, jint capacityIncrement);

FOUNDATION_EXPORT JavaUtilVector *new_JavaUtilVector_initWithInt_withInt_(jint capacity, jint capacityIncrement) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilVector_initWithJavaUtilCollection_(JavaUtilVector *self, id<JavaUtilCollection> collection);

FOUNDATION_EXPORT JavaUtilVector *new_JavaUtilVector_initWithJavaUtilCollection_(id<JavaUtilCollection> collection) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilVector)

#endif // _JavaUtilVector_H_
