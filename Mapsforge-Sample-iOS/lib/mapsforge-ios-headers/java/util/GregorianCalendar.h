//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/GregorianCalendar.java
//

#ifndef _JavaUtilGregorianCalendar_H_
#define _JavaUtilGregorianCalendar_H_

#include "J2ObjC_header.h"
#include "java/util/Calendar.h"

@class IOSByteArray;
@class JavaUtilDate;
@class JavaUtilLocale;
@class JavaUtilTimeZone;

#define JavaUtilGregorianCalendar_BC 0
#define JavaUtilGregorianCalendar_AD 1

@interface JavaUtilGregorianCalendar : JavaUtilCalendar

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)month
                    withInt:(jint)day;

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)month
                    withInt:(jint)day
                    withInt:(jint)hour
                    withInt:(jint)minute;

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)month
                    withInt:(jint)day
                    withInt:(jint)hour
                    withInt:(jint)minute
                    withInt:(jint)second;

- (instancetype)initWithJavaUtilLocale:(JavaUtilLocale *)locale;

- (instancetype)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)timezone;

- (instancetype)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)timezone
                      withJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)addWithInt:(jint)field
           withInt:(jint)value;

- (jboolean)isEqual:(id)object;

- (jint)getActualMaximumWithInt:(jint)field;

- (jint)getActualMinimumWithInt:(jint)field;

- (jint)getGreatestMinimumWithInt:(jint)field;

- (JavaUtilDate *)getGregorianChange;

- (jint)getLeastMaximumWithInt:(jint)field;

- (jint)getMaximumWithInt:(jint)field;

- (jint)getMinimumWithInt:(jint)field;

- (NSUInteger)hash;

- (jboolean)isLeapYearWithInt:(jint)year;

- (void)rollWithInt:(jint)field
        withBoolean:(jboolean)increment;

- (void)rollWithInt:(jint)field
            withInt:(jint)value;

- (void)setGregorianChangeWithJavaUtilDate:(JavaUtilDate *)date;

#pragma mark Protected

- (void)computeFields;

- (void)computeTime;

#pragma mark Package-Private

- (instancetype)initWithBoolean:(jboolean)ignored;

- (instancetype)initWithLong:(jlong)milliseconds;

@end

J2OBJC_STATIC_INIT(JavaUtilGregorianCalendar)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilGregorianCalendar, BC, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilGregorianCalendar, AD, jint)

FOUNDATION_EXPORT IOSByteArray *JavaUtilGregorianCalendar_DaysInMonth_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilGregorianCalendar, DaysInMonth_, IOSByteArray *)
J2OBJC_STATIC_FIELD_SETTER(JavaUtilGregorianCalendar, DaysInMonth_, IOSByteArray *)

FOUNDATION_EXPORT void JavaUtilGregorianCalendar_init(JavaUtilGregorianCalendar *self);

FOUNDATION_EXPORT JavaUtilGregorianCalendar *new_JavaUtilGregorianCalendar_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilGregorianCalendar_initWithInt_withInt_withInt_(JavaUtilGregorianCalendar *self, jint year, jint month, jint day);

FOUNDATION_EXPORT JavaUtilGregorianCalendar *new_JavaUtilGregorianCalendar_initWithInt_withInt_withInt_(jint year, jint month, jint day) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilGregorianCalendar_initWithInt_withInt_withInt_withInt_withInt_(JavaUtilGregorianCalendar *self, jint year, jint month, jint day, jint hour, jint minute);

FOUNDATION_EXPORT JavaUtilGregorianCalendar *new_JavaUtilGregorianCalendar_initWithInt_withInt_withInt_withInt_withInt_(jint year, jint month, jint day, jint hour, jint minute) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilGregorianCalendar_initWithInt_withInt_withInt_withInt_withInt_withInt_(JavaUtilGregorianCalendar *self, jint year, jint month, jint day, jint hour, jint minute, jint second);

FOUNDATION_EXPORT JavaUtilGregorianCalendar *new_JavaUtilGregorianCalendar_initWithInt_withInt_withInt_withInt_withInt_withInt_(jint year, jint month, jint day, jint hour, jint minute, jint second) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilGregorianCalendar_initWithLong_(JavaUtilGregorianCalendar *self, jlong milliseconds);

FOUNDATION_EXPORT JavaUtilGregorianCalendar *new_JavaUtilGregorianCalendar_initWithLong_(jlong milliseconds) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilGregorianCalendar_initWithJavaUtilLocale_(JavaUtilGregorianCalendar *self, JavaUtilLocale *locale);

FOUNDATION_EXPORT JavaUtilGregorianCalendar *new_JavaUtilGregorianCalendar_initWithJavaUtilLocale_(JavaUtilLocale *locale) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilGregorianCalendar_initWithJavaUtilTimeZone_(JavaUtilGregorianCalendar *self, JavaUtilTimeZone *timezone);

FOUNDATION_EXPORT JavaUtilGregorianCalendar *new_JavaUtilGregorianCalendar_initWithJavaUtilTimeZone_(JavaUtilTimeZone *timezone) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilGregorianCalendar_initWithJavaUtilTimeZone_withJavaUtilLocale_(JavaUtilGregorianCalendar *self, JavaUtilTimeZone *timezone, JavaUtilLocale *locale);

FOUNDATION_EXPORT JavaUtilGregorianCalendar *new_JavaUtilGregorianCalendar_initWithJavaUtilTimeZone_withJavaUtilLocale_(JavaUtilTimeZone *timezone, JavaUtilLocale *locale) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaUtilGregorianCalendar_initWithBoolean_(JavaUtilGregorianCalendar *self, jboolean ignored);

FOUNDATION_EXPORT JavaUtilGregorianCalendar *new_JavaUtilGregorianCalendar_initWithBoolean_(jboolean ignored) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilGregorianCalendar)

#endif // _JavaUtilGregorianCalendar_H_
