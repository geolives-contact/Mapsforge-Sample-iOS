//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/lang/reflect/Proxy.java
//

#ifndef _JavaLangReflectProxy_H_
#define _JavaLangReflectProxy_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"

@class IOSClass;
@class IOSObjectArray;
@class JavaLangClassLoader;
@protocol JavaLangReflectInvocationHandler;
@protocol JavaUtilMap;

@interface JavaLangReflectProxy : NSObject < JavaIoSerializable > {
 @public
  id<JavaLangReflectInvocationHandler> handler_;
  id<JavaUtilMap> methodMap_;
}

#pragma mark Public

+ (id<JavaLangReflectInvocationHandler>)getInvocationHandlerWithId:(id)proxy;

+ (IOSClass *)getProxyClassWithJavaLangClassLoader:(JavaLangClassLoader *)loader
                                 withIOSClassArray:(IOSObjectArray *)interfaces;

+ (jboolean)isProxyClassWithIOSClass:(IOSClass *)cl;

+ (id)newProxyInstanceWithJavaLangClassLoader:(JavaLangClassLoader *)loader
                            withIOSClassArray:(IOSObjectArray *)interfaces
         withJavaLangReflectInvocationHandler:(id<JavaLangReflectInvocationHandler>)h OBJC_METHOD_FAMILY_NONE;

#pragma mark Protected

- (instancetype)initWithJavaLangReflectInvocationHandler:(id<JavaLangReflectInvocationHandler>)h;

#pragma mark Package-Private




@end

J2OBJC_STATIC_INIT(JavaLangReflectProxy)

J2OBJC_FIELD_SETTER(JavaLangReflectProxy, handler_, id<JavaLangReflectInvocationHandler>)
J2OBJC_FIELD_SETTER(JavaLangReflectProxy, methodMap_, id<JavaUtilMap>)

FOUNDATION_EXPORT void JavaLangReflectProxy_initWithJavaLangReflectInvocationHandler_(JavaLangReflectProxy *self, id<JavaLangReflectInvocationHandler> h);

FOUNDATION_EXPORT JavaLangReflectProxy *new_JavaLangReflectProxy_initWithJavaLangReflectInvocationHandler_(id<JavaLangReflectInvocationHandler> h) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IOSClass *JavaLangReflectProxy_getProxyClassWithJavaLangClassLoader_withIOSClassArray_(JavaLangClassLoader *loader, IOSObjectArray *interfaces);

FOUNDATION_EXPORT id JavaLangReflectProxy_newProxyInstanceWithJavaLangClassLoader_withIOSClassArray_withJavaLangReflectInvocationHandler_(JavaLangClassLoader *loader, IOSObjectArray *interfaces, id<JavaLangReflectInvocationHandler> h);

FOUNDATION_EXPORT jboolean JavaLangReflectProxy_isProxyClassWithIOSClass_(IOSClass *cl);

FOUNDATION_EXPORT id<JavaLangReflectInvocationHandler> JavaLangReflectProxy_getInvocationHandlerWithId_(id proxy);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangReflectProxy)

#endif // _JavaLangReflectProxy_H_
