//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: Classes/java/lang/Thread.java
//

#ifndef _JavaLangThread_H_
#define _JavaLangThread_H_

#include "J2ObjC_header.h"
#include "java/lang/Enum.h"
#include "java/lang/Runnable.h"

@class IOSObjectArray;
@class JavaLangClassLoader;
@class JavaLangThreadGroup;
@class JavaLangThread_StateEnum;
@class JavaLangThrowable;
@protocol JavaLangThread_UncaughtExceptionHandler;
@protocol JavaUtilMap;

#define JavaLangThread_MAX_PRIORITY 10
#define JavaLangThread_MIN_PRIORITY 1
#define JavaLangThread_NORM_PRIORITY 5

@interface JavaLangThread : NSObject < JavaLangRunnable > {
 @public
  jboolean interrupted__;
  id blocker_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)runnable;

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)runnable
                            withNSString:(NSString *)threadName;

- (instancetype)initWithNSString:(NSString *)threadName;

- (instancetype)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)group
                       withJavaLangRunnable:(id<JavaLangRunnable>)runnable;

- (instancetype)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)group
                       withJavaLangRunnable:(id<JavaLangRunnable>)runnable
                               withNSString:(NSString *)threadName;

- (instancetype)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)group
                       withJavaLangRunnable:(id<JavaLangRunnable>)runnable
                               withNSString:(NSString *)threadName
                                   withLong:(jlong)stack;

- (instancetype)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)group
                               withNSString:(NSString *)threadName;

+ (jint)activeCount;

- (void)checkAccess;

- (jint)countStackFrames;

+ (JavaLangThread *)currentThread;

+ (jint)enumerateWithJavaLangThreadArray:(IOSObjectArray *)threads;

+ (id<JavaUtilMap>)getAllStackTraces;

- (JavaLangClassLoader *)getContextClassLoader;

+ (id<JavaLangThread_UncaughtExceptionHandler>)getDefaultUncaughtExceptionHandler;

- (jlong)getId;

- (NSString *)getName;

- (jint)getPriority;

- (IOSObjectArray *)getStackTrace;

- (JavaLangThread_StateEnum *)getState;

- (JavaLangThreadGroup *)getThreadGroup;

- (id<JavaLangThread_UncaughtExceptionHandler>)getUncaughtExceptionHandler;

+ (jboolean)holdsLockWithId:(id)object;

- (void)interrupt;

+ (jboolean)interrupted;

- (jboolean)isAlive;

- (jboolean)isDaemon;

- (jboolean)isInterrupted;

- (void)join;

- (void)joinWithLong:(jlong)millis;

- (void)joinWithLong:(jlong)millis
             withInt:(jint)nanos;

- (void)parkForWithLong:(jlong)nanos;

- (void)parkUntilWithLong:(jlong)time;

- (void)popInterruptAction$WithJavaLangRunnable:(id<JavaLangRunnable>)interruptAction;

- (void)pushInterruptAction$WithJavaLangRunnable:(id<JavaLangRunnable>)interruptAction;

- (void)run;

- (void)setContextClassLoaderWithJavaLangClassLoader:(JavaLangClassLoader *)cl;

- (void)setDaemonWithBoolean:(jboolean)isDaemon;

+ (void)setDefaultUncaughtExceptionHandlerWithJavaLangThread_UncaughtExceptionHandler:(id<JavaLangThread_UncaughtExceptionHandler>)handler;

- (void)setNameWithNSString:(NSString *)name;

- (void)setPriorityWithInt:(jint)priority;

- (void)setUncaughtExceptionHandlerWithJavaLangThread_UncaughtExceptionHandler:(id<JavaLangThread_UncaughtExceptionHandler>)handler;

+ (void)sleepWithLong:(jlong)millis;

+ (void)sleepWithLong:(jlong)millis
              withInt:(jint)nanos;

- (void)start;

- (NSString *)description;

- (void)unpark;

+ (void)yield;

@end

J2OBJC_STATIC_INIT(JavaLangThread)

J2OBJC_FIELD_SETTER(JavaLangThread, blocker_, id)

J2OBJC_STATIC_FIELD_GETTER(JavaLangThread, MAX_PRIORITY, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaLangThread, MIN_PRIORITY, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaLangThread, NORM_PRIORITY, jint)

FOUNDATION_EXPORT void JavaLangThread_init(JavaLangThread *self);

FOUNDATION_EXPORT JavaLangThread *new_JavaLangThread_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaLangThread_initWithJavaLangRunnable_(JavaLangThread *self, id<JavaLangRunnable> runnable);

FOUNDATION_EXPORT JavaLangThread *new_JavaLangThread_initWithJavaLangRunnable_(id<JavaLangRunnable> runnable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaLangThread_initWithJavaLangRunnable_withNSString_(JavaLangThread *self, id<JavaLangRunnable> runnable, NSString *threadName);

FOUNDATION_EXPORT JavaLangThread *new_JavaLangThread_initWithJavaLangRunnable_withNSString_(id<JavaLangRunnable> runnable, NSString *threadName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaLangThread_initWithNSString_(JavaLangThread *self, NSString *threadName);

FOUNDATION_EXPORT JavaLangThread *new_JavaLangThread_initWithNSString_(NSString *threadName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaLangThread_initWithJavaLangThreadGroup_withJavaLangRunnable_(JavaLangThread *self, JavaLangThreadGroup *group, id<JavaLangRunnable> runnable);

FOUNDATION_EXPORT JavaLangThread *new_JavaLangThread_initWithJavaLangThreadGroup_withJavaLangRunnable_(JavaLangThreadGroup *group, id<JavaLangRunnable> runnable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaLangThread_initWithJavaLangThreadGroup_withJavaLangRunnable_withNSString_withLong_(JavaLangThread *self, JavaLangThreadGroup *group, id<JavaLangRunnable> runnable, NSString *threadName, jlong stack);

FOUNDATION_EXPORT JavaLangThread *new_JavaLangThread_initWithJavaLangThreadGroup_withJavaLangRunnable_withNSString_withLong_(JavaLangThreadGroup *group, id<JavaLangRunnable> runnable, NSString *threadName, jlong stack) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaLangThread_initWithJavaLangThreadGroup_withJavaLangRunnable_withNSString_(JavaLangThread *self, JavaLangThreadGroup *group, id<JavaLangRunnable> runnable, NSString *threadName);

FOUNDATION_EXPORT JavaLangThread *new_JavaLangThread_initWithJavaLangThreadGroup_withJavaLangRunnable_withNSString_(JavaLangThreadGroup *group, id<JavaLangRunnable> runnable, NSString *threadName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaLangThread_initWithJavaLangThreadGroup_withNSString_(JavaLangThread *self, JavaLangThreadGroup *group, NSString *threadName);

FOUNDATION_EXPORT JavaLangThread *new_JavaLangThread_initWithJavaLangThreadGroup_withNSString_(JavaLangThreadGroup *group, NSString *threadName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangThread *JavaLangThread_currentThread();

FOUNDATION_EXPORT jint JavaLangThread_activeCount();

FOUNDATION_EXPORT jint JavaLangThread_enumerateWithJavaLangThreadArray_(IOSObjectArray *threads);

FOUNDATION_EXPORT jboolean JavaLangThread_interrupted();

FOUNDATION_EXPORT void JavaLangThread_sleepWithLong_(jlong millis);

FOUNDATION_EXPORT void JavaLangThread_sleepWithLong_withInt_(jlong millis, jint nanos);

FOUNDATION_EXPORT void JavaLangThread_yield();

FOUNDATION_EXPORT jboolean JavaLangThread_holdsLockWithId_(id object);

FOUNDATION_EXPORT id<JavaLangThread_UncaughtExceptionHandler> JavaLangThread_getDefaultUncaughtExceptionHandler();

FOUNDATION_EXPORT void JavaLangThread_setDefaultUncaughtExceptionHandlerWithJavaLangThread_UncaughtExceptionHandler_(id<JavaLangThread_UncaughtExceptionHandler> handler);

FOUNDATION_EXPORT id<JavaUtilMap> JavaLangThread_getAllStackTraces();

J2OBJC_TYPE_LITERAL_HEADER(JavaLangThread)

typedef NS_ENUM(NSUInteger, JavaLangThread_State) {
  JavaLangThread_State_NEW = 0,
  JavaLangThread_State_RUNNABLE = 1,
  JavaLangThread_State_BLOCKED = 2,
  JavaLangThread_State_WAITING = 3,
  JavaLangThread_State_TIMED_WAITING = 4,
  JavaLangThread_State_TERMINATED = 5,
};

@interface JavaLangThread_StateEnum : JavaLangEnum < NSCopying >

#pragma mark Package-Private

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *JavaLangThread_StateEnum_values();

+ (JavaLangThread_StateEnum *)valueOfWithNSString:(NSString *)name;
FOUNDATION_EXPORT JavaLangThread_StateEnum *JavaLangThread_StateEnum_valueOfWithNSString_(NSString *name);

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(JavaLangThread_StateEnum)

FOUNDATION_EXPORT JavaLangThread_StateEnum *JavaLangThread_StateEnum_values_[];

#define JavaLangThread_StateEnum_NEW JavaLangThread_StateEnum_values_[JavaLangThread_State_NEW]
J2OBJC_ENUM_CONSTANT_GETTER(JavaLangThread_StateEnum, NEW)

#define JavaLangThread_StateEnum_RUNNABLE JavaLangThread_StateEnum_values_[JavaLangThread_State_RUNNABLE]
J2OBJC_ENUM_CONSTANT_GETTER(JavaLangThread_StateEnum, RUNNABLE)

#define JavaLangThread_StateEnum_BLOCKED JavaLangThread_StateEnum_values_[JavaLangThread_State_BLOCKED]
J2OBJC_ENUM_CONSTANT_GETTER(JavaLangThread_StateEnum, BLOCKED)

#define JavaLangThread_StateEnum_WAITING JavaLangThread_StateEnum_values_[JavaLangThread_State_WAITING]
J2OBJC_ENUM_CONSTANT_GETTER(JavaLangThread_StateEnum, WAITING)

#define JavaLangThread_StateEnum_TIMED_WAITING JavaLangThread_StateEnum_values_[JavaLangThread_State_TIMED_WAITING]
J2OBJC_ENUM_CONSTANT_GETTER(JavaLangThread_StateEnum, TIMED_WAITING)

#define JavaLangThread_StateEnum_TERMINATED JavaLangThread_StateEnum_values_[JavaLangThread_State_TERMINATED]
J2OBJC_ENUM_CONSTANT_GETTER(JavaLangThread_StateEnum, TERMINATED)

J2OBJC_TYPE_LITERAL_HEADER(JavaLangThread_StateEnum)

@protocol JavaLangThread_UncaughtExceptionHandler < NSObject, JavaObject >

- (void)uncaughtExceptionWithJavaLangThread:(JavaLangThread *)t
                      withJavaLangThrowable:(JavaLangThrowable *)e;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangThread_UncaughtExceptionHandler)

J2OBJC_TYPE_LITERAL_HEADER(JavaLangThread_UncaughtExceptionHandler)

#endif // _JavaLangThread_H_
