//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/net/DatagramSocket.java
//

#ifndef _JavaNetDatagramSocket_H_
#define _JavaNetDatagramSocket_H_

#include "J2ObjC_header.h"
#include "java/io/Closeable.h"

@class JavaIoFileDescriptor;
@class JavaNetDatagramPacket;
@class JavaNetDatagramSocketImpl;
@class JavaNetInetAddress;
@class JavaNetNetworkInterface;
@class JavaNetSocketAddress;
@class JavaNioChannelsDatagramChannel;
@protocol JavaNetDatagramSocketImplFactory;

@interface JavaNetDatagramSocket : NSObject < JavaIoCloseable > {
 @public
  JavaNetDatagramSocketImpl *impl_;
  JavaNetInetAddress *address_;
  jint port_;
  jboolean isBound__;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithInt:(jint)aPort;

- (instancetype)initWithInt:(jint)aPort
     withJavaNetInetAddress:(JavaNetInetAddress *)addr;

- (instancetype)initWithJavaNetSocketAddress:(JavaNetSocketAddress *)localAddr;

- (void)bindWithJavaNetSocketAddress:(JavaNetSocketAddress *)localAddr;

- (void)close;

- (void)connectWithJavaNetInetAddress:(JavaNetInetAddress *)address
                              withInt:(jint)port;

- (void)connectWithJavaNetSocketAddress:(JavaNetSocketAddress *)peer;

- (void)disconnect;

- (jboolean)getBroadcast;

- (JavaNioChannelsDatagramChannel *)getChannel;

- (JavaIoFileDescriptor *)getFileDescriptor$;

- (JavaNetInetAddress *)getInetAddress;

- (JavaNetInetAddress *)getLocalAddress;

- (jint)getLocalPort;

- (JavaNetSocketAddress *)getLocalSocketAddress;

- (jint)getPort;

- (jint)getReceiveBufferSize;

- (JavaNetSocketAddress *)getRemoteSocketAddress;

- (jboolean)getReuseAddress;

- (jint)getSendBufferSize;

- (jint)getSoTimeout;

- (jint)getTrafficClass;

- (jboolean)isBound;

- (jboolean)isClosed;

- (jboolean)isConnected;

- (void)onBindWithJavaNetInetAddress:(JavaNetInetAddress *)localAddress
                             withInt:(jint)localPort;

- (void)onClose;

- (void)onConnectWithJavaNetInetAddress:(JavaNetInetAddress *)remoteAddress
                                withInt:(jint)remotePort;

- (void)onDisconnect;

- (void)receiveWithJavaNetDatagramPacket:(JavaNetDatagramPacket *)pack;

- (void)sendWithJavaNetDatagramPacket:(JavaNetDatagramPacket *)pack;

- (void)setBroadcastWithBoolean:(jboolean)broadcast;

+ (void)setDatagramSocketImplFactoryWithJavaNetDatagramSocketImplFactory:(id<JavaNetDatagramSocketImplFactory>)fac;

- (void)setNetworkInterfaceWithJavaNetNetworkInterface:(JavaNetNetworkInterface *)netInterface;

- (void)setReceiveBufferSizeWithInt:(jint)size;

- (void)setReuseAddressWithBoolean:(jboolean)reuse;

- (void)setSendBufferSizeWithInt:(jint)size;

- (void)setSoTimeoutWithInt:(jint)timeout;

- (void)setTrafficClassWithInt:(jint)value;

#pragma mark Protected

- (instancetype)initWithJavaNetDatagramSocketImpl:(JavaNetDatagramSocketImpl *)socketImpl;

#pragma mark Package-Private

- (void)checkOpen;

- (void)createSocketWithInt:(jint)aPort
     withJavaNetInetAddress:(JavaNetInetAddress *)addr;

- (jboolean)isMulticastSocket;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNetDatagramSocket)

J2OBJC_FIELD_SETTER(JavaNetDatagramSocket, impl_, JavaNetDatagramSocketImpl *)
J2OBJC_FIELD_SETTER(JavaNetDatagramSocket, address_, JavaNetInetAddress *)

FOUNDATION_EXPORT id<JavaNetDatagramSocketImplFactory> JavaNetDatagramSocket_factory_;
J2OBJC_STATIC_FIELD_GETTER(JavaNetDatagramSocket, factory_, id<JavaNetDatagramSocketImplFactory>)
J2OBJC_STATIC_FIELD_SETTER(JavaNetDatagramSocket, factory_, id<JavaNetDatagramSocketImplFactory>)

FOUNDATION_EXPORT void JavaNetDatagramSocket_init(JavaNetDatagramSocket *self);

FOUNDATION_EXPORT JavaNetDatagramSocket *new_JavaNetDatagramSocket_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaNetDatagramSocket_initWithInt_(JavaNetDatagramSocket *self, jint aPort);

FOUNDATION_EXPORT JavaNetDatagramSocket *new_JavaNetDatagramSocket_initWithInt_(jint aPort) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaNetDatagramSocket_initWithInt_withJavaNetInetAddress_(JavaNetDatagramSocket *self, jint aPort, JavaNetInetAddress *addr);

FOUNDATION_EXPORT JavaNetDatagramSocket *new_JavaNetDatagramSocket_initWithInt_withJavaNetInetAddress_(jint aPort, JavaNetInetAddress *addr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaNetDatagramSocket_setDatagramSocketImplFactoryWithJavaNetDatagramSocketImplFactory_(id<JavaNetDatagramSocketImplFactory> fac);

FOUNDATION_EXPORT void JavaNetDatagramSocket_initWithJavaNetDatagramSocketImpl_(JavaNetDatagramSocket *self, JavaNetDatagramSocketImpl *socketImpl);

FOUNDATION_EXPORT JavaNetDatagramSocket *new_JavaNetDatagramSocket_initWithJavaNetDatagramSocketImpl_(JavaNetDatagramSocketImpl *socketImpl) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void JavaNetDatagramSocket_initWithJavaNetSocketAddress_(JavaNetDatagramSocket *self, JavaNetSocketAddress *localAddr);

FOUNDATION_EXPORT JavaNetDatagramSocket *new_JavaNetDatagramSocket_initWithJavaNetSocketAddress_(JavaNetSocketAddress *localAddr) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JavaNetDatagramSocket)

#endif // _JavaNetDatagramSocket_H_
