//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/net/InetAddress.java
//

#ifndef _JavaNetInetAddress_H_
#define _JavaNetInetAddress_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"

@class IOSByteArray;
@class IOSObjectArray;
@class JavaNetNetworkInterface;

@interface JavaNetInetAddress : NSObject < JavaIoSerializable > {
 @public
  IOSByteArray *ipaddress_;
  NSString *hostName_;
}

#pragma mark Public

+ (void)clearDnsCache;

- (jboolean)isEqual:(id)obj;

- (IOSByteArray *)getAddress;

+ (IOSObjectArray *)getAllByNameWithNSString:(NSString *)host;

+ (JavaNetInetAddress *)getByAddressWithByteArray:(IOSByteArray *)ipAddress;

+ (JavaNetInetAddress *)getByAddressWithNSString:(NSString *)hostName
                                   withByteArray:(IOSByteArray *)ipAddress;

+ (JavaNetInetAddress *)getByAddressWithNSString:(NSString *)hostName
                                   withByteArray:(IOSByteArray *)ipAddress
                                         withInt:(jint)scopeId;

+ (JavaNetInetAddress *)getByNameWithNSString:(NSString *)host;

- (NSString *)getCanonicalHostName;

- (jint)getFamily;

- (NSString *)getHostAddress;

- (NSString *)getHostName;

+ (JavaNetInetAddress *)getLocalHost;

+ (JavaNetInetAddress *)getLoopbackAddress;

- (NSUInteger)hash;

- (jboolean)isAnyLocalAddress;

- (jboolean)isLinkLocalAddress;

- (jboolean)isLoopbackAddress;

- (jboolean)isMCGlobal;

- (jboolean)isMCLinkLocal;

- (jboolean)isMCNodeLocal;

- (jboolean)isMCOrgLocal;

- (jboolean)isMCSiteLocal;

- (jboolean)isMulticastAddress;

+ (jboolean)isNumericWithNSString:(NSString *)address;

- (jboolean)isReachableWithInt:(jint)timeout;

- (jboolean)isReachableWithJavaNetNetworkInterface:(JavaNetNetworkInterface *)networkInterface
                                           withInt:(jint)ttl
                                           withInt:(jint)timeout;

- (jboolean)isSiteLocalAddress;

+ (JavaNetInetAddress *)parseNumericAddressWithNSString:(NSString *)numericAddress;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)family
              withByteArray:(IOSByteArray *)ipaddress
               withNSString:(NSString *)hostName;

@end

J2OBJC_STATIC_INIT(JavaNetInetAddress)

J2OBJC_FIELD_SETTER(JavaNetInetAddress, ipaddress_, IOSByteArray *)
J2OBJC_FIELD_SETTER(JavaNetInetAddress, hostName_, NSString *)

FOUNDATION_EXPORT JavaNetInetAddress *JavaNetInetAddress_UNSPECIFIED_;
J2OBJC_STATIC_FIELD_GETTER(JavaNetInetAddress, UNSPECIFIED_, JavaNetInetAddress *)

FOUNDATION_EXPORT void JavaNetInetAddress_initWithInt_withByteArray_withNSString_(JavaNetInetAddress *self, jint family, IOSByteArray *ipaddress, NSString *hostName);

FOUNDATION_EXPORT JavaNetInetAddress *new_JavaNetInetAddress_initWithInt_withByteArray_withNSString_(jint family, IOSByteArray *ipaddress, NSString *hostName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IOSObjectArray *JavaNetInetAddress_getAllByNameWithNSString_(NSString *host);

FOUNDATION_EXPORT JavaNetInetAddress *JavaNetInetAddress_getByNameWithNSString_(NSString *host);

FOUNDATION_EXPORT JavaNetInetAddress *JavaNetInetAddress_getLocalHost();

FOUNDATION_EXPORT void JavaNetInetAddress_clearDnsCache();

FOUNDATION_EXPORT jboolean JavaNetInetAddress_isNumericWithNSString_(NSString *address);

FOUNDATION_EXPORT JavaNetInetAddress *JavaNetInetAddress_parseNumericAddressWithNSString_(NSString *numericAddress);

FOUNDATION_EXPORT JavaNetInetAddress *JavaNetInetAddress_getLoopbackAddress();

FOUNDATION_EXPORT JavaNetInetAddress *JavaNetInetAddress_getByAddressWithByteArray_(IOSByteArray *ipAddress);

FOUNDATION_EXPORT JavaNetInetAddress *JavaNetInetAddress_getByAddressWithNSString_withByteArray_(NSString *hostName, IOSByteArray *ipAddress);

FOUNDATION_EXPORT JavaNetInetAddress *JavaNetInetAddress_getByAddressWithNSString_withByteArray_withInt_(NSString *hostName, IOSByteArray *ipAddress, jint scopeId);

J2OBJC_TYPE_LITERAL_HEADER(JavaNetInetAddress)

#endif // _JavaNetInetAddress_H_
