//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/cache/InMemoryTileCache.java
//

#ifndef _OrgMapsforgeMapLayerCacheInMemoryTileCache_H_
#define _OrgMapsforgeMapLayerCacheInMemoryTileCache_H_

#include "J2ObjC_header.h"
#include "org/mapsforge/core/util/WorkingSetCache.h"
#include "org/mapsforge/map/layer/cache/TileCache.h"

@class OrgMapsforgeMapLayerQueueJob;
@protocol JavaUtilMap_Entry;
@protocol JavaUtilSet;
@protocol OrgMapsforgeCoreGraphicsTileBitmap;

@interface OrgMapsforgeMapLayerCacheInMemoryTileCache : NSObject < OrgMapsforgeMapLayerCacheTileCache >

#pragma mark Public

- (instancetype)initWithInt:(jint)capacity;

- (jboolean)containsKeyWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key;

- (void)destroy;

- (id<OrgMapsforgeCoreGraphicsTileBitmap>)getWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key;

- (jint)getCapacity;

- (jint)getCapacityFirstLevel;

- (id<OrgMapsforgeCoreGraphicsTileBitmap>)getImmediatelyWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key;

- (void)purge;

- (void)putWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key
     withOrgMapsforgeCoreGraphicsTileBitmap:(id<OrgMapsforgeCoreGraphicsTileBitmap>)bitmap;

- (void)setCapacityWithInt:(jint)capacity;

- (void)setWorkingSetWithJavaUtilSet:(id<JavaUtilSet>)jobs;

@end

J2OBJC_STATIC_INIT(OrgMapsforgeMapLayerCacheInMemoryTileCache)

FOUNDATION_EXPORT void OrgMapsforgeMapLayerCacheInMemoryTileCache_initWithInt_(OrgMapsforgeMapLayerCacheInMemoryTileCache *self, jint capacity);

FOUNDATION_EXPORT OrgMapsforgeMapLayerCacheInMemoryTileCache *new_OrgMapsforgeMapLayerCacheInMemoryTileCache_initWithInt_(jint capacity) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgMapsforgeMapLayerCacheInMemoryTileCache)

@interface OrgMapsforgeMapLayerCacheBitmapLRUCache : OrgMapsforgeCoreUtilWorkingSetCache

#pragma mark Public

- (instancetype)initWithInt:(jint)capacity;

#pragma mark Protected

- (jboolean)removeEldestEntryWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)eldest;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMapsforgeMapLayerCacheBitmapLRUCache)

FOUNDATION_EXPORT void OrgMapsforgeMapLayerCacheBitmapLRUCache_initWithInt_(OrgMapsforgeMapLayerCacheBitmapLRUCache *self, jint capacity);

FOUNDATION_EXPORT OrgMapsforgeMapLayerCacheBitmapLRUCache *new_OrgMapsforgeMapLayerCacheBitmapLRUCache_initWithInt_(jint capacity) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgMapsforgeMapLayerCacheBitmapLRUCache)

#endif // _OrgMapsforgeMapLayerCacheInMemoryTileCache_H_
