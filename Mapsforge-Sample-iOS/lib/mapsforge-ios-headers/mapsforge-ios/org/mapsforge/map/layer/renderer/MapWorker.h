//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/renderer/MapWorker.java
//

#ifndef _OrgMapsforgeMapLayerRendererMapWorker_H_
#define _OrgMapsforgeMapLayerRendererMapWorker_H_

#include "J2ObjC_header.h"
#include "org/mapsforge/map/util/PausableThread.h"

@class OrgMapsforgeMapLayerLayer;
@class OrgMapsforgeMapLayerQueueJobQueue;
@class OrgMapsforgeMapLayerRendererDatabaseRenderer;
@protocol OrgMapsforgeMapLayerCacheTileCache;

@interface OrgMapsforgeMapLayerRendererMapWorker : OrgMapsforgeMapUtilPausableThread

#pragma mark Public

- (instancetype)initWithOrgMapsforgeMapLayerCacheTileCache:(id<OrgMapsforgeMapLayerCacheTileCache>)tileCache
                     withOrgMapsforgeMapLayerQueueJobQueue:(OrgMapsforgeMapLayerQueueJobQueue *)jobQueue
          withOrgMapsforgeMapLayerRendererDatabaseRenderer:(OrgMapsforgeMapLayerRendererDatabaseRenderer *)databaseRenderer
                             withOrgMapsforgeMapLayerLayer:(OrgMapsforgeMapLayerLayer *)layer;

#pragma mark Protected

- (void)doWork;

- (OrgMapsforgeMapUtilPausableThread_ThreadPriorityEnum *)getThreadPriority;

- (jboolean)hasWork;

@end

J2OBJC_STATIC_INIT(OrgMapsforgeMapLayerRendererMapWorker)

FOUNDATION_EXPORT jboolean OrgMapsforgeMapLayerRendererMapWorker_DEBUG_TIMING_;
J2OBJC_STATIC_FIELD_GETTER(OrgMapsforgeMapLayerRendererMapWorker, DEBUG_TIMING_, jboolean)
J2OBJC_STATIC_FIELD_REF_GETTER(OrgMapsforgeMapLayerRendererMapWorker, DEBUG_TIMING_, jboolean)

FOUNDATION_EXPORT void OrgMapsforgeMapLayerRendererMapWorker_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerQueueJobQueue_withOrgMapsforgeMapLayerRendererDatabaseRenderer_withOrgMapsforgeMapLayerLayer_(OrgMapsforgeMapLayerRendererMapWorker *self, id<OrgMapsforgeMapLayerCacheTileCache> tileCache, OrgMapsforgeMapLayerQueueJobQueue *jobQueue, OrgMapsforgeMapLayerRendererDatabaseRenderer *databaseRenderer, OrgMapsforgeMapLayerLayer *layer);

FOUNDATION_EXPORT OrgMapsforgeMapLayerRendererMapWorker *new_OrgMapsforgeMapLayerRendererMapWorker_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerQueueJobQueue_withOrgMapsforgeMapLayerRendererDatabaseRenderer_withOrgMapsforgeMapLayerLayer_(id<OrgMapsforgeMapLayerCacheTileCache> tileCache, OrgMapsforgeMapLayerQueueJobQueue *jobQueue, OrgMapsforgeMapLayerRendererDatabaseRenderer *databaseRenderer, OrgMapsforgeMapLayerLayer *layer) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgMapsforgeMapLayerRendererMapWorker)

#endif // _OrgMapsforgeMapLayerRendererMapWorker_H_
