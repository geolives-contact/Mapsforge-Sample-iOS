//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/cbrasseur/Documents/j2objc-0.9.7/guava/sources/com/google/common/hash/HashCodes.java
//

#include "J2ObjC_header.h"

#pragma push_macro("ComGoogleCommonHashHashCodes_INCLUDE_ALL")
#if ComGoogleCommonHashHashCodes_RESTRICT
#define ComGoogleCommonHashHashCodes_INCLUDE_ALL 0
#else
#define ComGoogleCommonHashHashCodes_INCLUDE_ALL 1
#endif
#undef ComGoogleCommonHashHashCodes_RESTRICT

#if !defined (_ComGoogleCommonHashHashCodes_) && (ComGoogleCommonHashHashCodes_INCLUDE_ALL || ComGoogleCommonHashHashCodes_INCLUDE)
#define _ComGoogleCommonHashHashCodes_

@class ComGoogleCommonHashHashCode;
@class IOSByteArray;

@interface ComGoogleCommonHashHashCodes : NSObject

#pragma mark Public

+ (ComGoogleCommonHashHashCode *)fromBytesWithByteArray:(IOSByteArray *)bytes;

+ (ComGoogleCommonHashHashCode *)fromIntWithInt:(jint)hash_;

+ (ComGoogleCommonHashHashCode *)fromLongWithLong:(jlong)hash_;

#pragma mark Package-Private

+ (ComGoogleCommonHashHashCode *)fromBytesNoCopyWithByteArray:(IOSByteArray *)bytes;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonHashHashCodes)

FOUNDATION_EXPORT ComGoogleCommonHashHashCode *ComGoogleCommonHashHashCodes_fromIntWithInt_(jint hash_);

FOUNDATION_EXPORT ComGoogleCommonHashHashCode *ComGoogleCommonHashHashCodes_fromLongWithLong_(jlong hash_);

FOUNDATION_EXPORT ComGoogleCommonHashHashCode *ComGoogleCommonHashHashCodes_fromBytesWithByteArray_(IOSByteArray *bytes);

FOUNDATION_EXPORT ComGoogleCommonHashHashCode *ComGoogleCommonHashHashCodes_fromBytesNoCopyWithByteArray_(IOSByteArray *bytes);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonHashHashCodes)

#endif

#if !defined (_ComGoogleCommonHashHashCodes_IntHashCode_) && (ComGoogleCommonHashHashCodes_INCLUDE_ALL || ComGoogleCommonHashHashCodes_IntHashCode_INCLUDE)
#define _ComGoogleCommonHashHashCodes_IntHashCode_

#endif

#if !defined (_ComGoogleCommonHashHashCodes_LongHashCode_) && (ComGoogleCommonHashHashCodes_INCLUDE_ALL || ComGoogleCommonHashHashCodes_LongHashCode_INCLUDE)
#define _ComGoogleCommonHashHashCodes_LongHashCode_

#endif

#if !defined (_ComGoogleCommonHashHashCodes_BytesHashCode_) && (ComGoogleCommonHashHashCodes_INCLUDE_ALL || ComGoogleCommonHashHashCodes_BytesHashCode_INCLUDE)
#define _ComGoogleCommonHashHashCodes_BytesHashCode_

#endif
#pragma pop_macro("ComGoogleCommonHashHashCodes_INCLUDE_ALL")
