//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/cbrasseur/Documents/j2objc-0.9.7/guava/sources/com/google/common/collect/AbstractBiMap.java
//

#include "J2ObjC_header.h"

#pragma push_macro("ComGoogleCommonCollectAbstractBiMap_INCLUDE_ALL")
#if ComGoogleCommonCollectAbstractBiMap_RESTRICT
#define ComGoogleCommonCollectAbstractBiMap_INCLUDE_ALL 0
#else
#define ComGoogleCommonCollectAbstractBiMap_INCLUDE_ALL 1
#endif
#undef ComGoogleCommonCollectAbstractBiMap_RESTRICT

#if !defined (_ComGoogleCommonCollectAbstractBiMap_) && (ComGoogleCommonCollectAbstractBiMap_INCLUDE_ALL || ComGoogleCommonCollectAbstractBiMap_INCLUDE)
#define _ComGoogleCommonCollectAbstractBiMap_

#define ComGoogleCommonCollectForwardingMap_RESTRICT 1
#define ComGoogleCommonCollectForwardingMap_INCLUDE 1
#include "com/google/common/collect/ForwardingMap.h"

#define ComGoogleCommonCollectBiMap_RESTRICT 1
#define ComGoogleCommonCollectBiMap_INCLUDE 1
#include "com/google/common/collect/BiMap.h"

#define JavaIoSerializable_RESTRICT 1
#define JavaIoSerializable_INCLUDE 1
#include "java/io/Serializable.h"

@protocol JavaUtilMap;
@protocol JavaUtilSet;

@interface ComGoogleCommonCollectAbstractBiMap : ComGoogleCommonCollectForwardingMap < ComGoogleCommonCollectBiMap, JavaIoSerializable > {
 @public
  ComGoogleCommonCollectAbstractBiMap *inverse__;
}

#pragma mark Public

- (void)clear;

- (jboolean)containsValueWithId:(id)value;

- (id<JavaUtilSet>)entrySet;

- (id)forcePutWithId:(id)key
              withId:(id)value;

- (id<ComGoogleCommonCollectBiMap>)inverse;

- (id<JavaUtilSet>)keySet;

- (id)putWithId:(id)key
         withId:(id)value;

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)map;

- (id)removeWithId:(id)key;

- (id<JavaUtilSet>)values;

#pragma mark Protected

- (id<JavaUtilMap>)delegate;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)forward
                    withJavaUtilMap:(id<JavaUtilMap>)backward;

- (id)checkKeyWithId:(id)key;

- (id)checkValueWithId:(id)value;

- (void)setDelegatesWithJavaUtilMap:(id<JavaUtilMap>)forward
                    withJavaUtilMap:(id<JavaUtilMap>)backward;

- (void)setInverseWithComGoogleCommonCollectAbstractBiMap:(ComGoogleCommonCollectAbstractBiMap *)inverse;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectAbstractBiMap)

J2OBJC_FIELD_SETTER(ComGoogleCommonCollectAbstractBiMap, inverse__, ComGoogleCommonCollectAbstractBiMap *)

FOUNDATION_EXPORT void ComGoogleCommonCollectAbstractBiMap_initWithJavaUtilMap_withJavaUtilMap_(ComGoogleCommonCollectAbstractBiMap *self, id<JavaUtilMap> forward, id<JavaUtilMap> backward);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectAbstractBiMap)

#endif

#if !defined (_ComGoogleCommonCollectAbstractBiMap_KeySet_) && (ComGoogleCommonCollectAbstractBiMap_INCLUDE_ALL || ComGoogleCommonCollectAbstractBiMap_KeySet_INCLUDE)
#define _ComGoogleCommonCollectAbstractBiMap_KeySet_

#endif

#if !defined (_ComGoogleCommonCollectAbstractBiMap_ValueSet_) && (ComGoogleCommonCollectAbstractBiMap_INCLUDE_ALL || ComGoogleCommonCollectAbstractBiMap_ValueSet_INCLUDE)
#define _ComGoogleCommonCollectAbstractBiMap_ValueSet_

#endif

#if !defined (_ComGoogleCommonCollectAbstractBiMap_EntrySet_) && (ComGoogleCommonCollectAbstractBiMap_INCLUDE_ALL || ComGoogleCommonCollectAbstractBiMap_EntrySet_INCLUDE)
#define _ComGoogleCommonCollectAbstractBiMap_EntrySet_

#endif

#if !defined (_ComGoogleCommonCollectAbstractBiMap_EntrySet_$1_) && (ComGoogleCommonCollectAbstractBiMap_INCLUDE_ALL || ComGoogleCommonCollectAbstractBiMap_EntrySet_$1_INCLUDE)
#define _ComGoogleCommonCollectAbstractBiMap_EntrySet_$1_

#endif

#if !defined (_ComGoogleCommonCollectAbstractBiMap_EntrySet_$1_1BiMapEntry_) && (ComGoogleCommonCollectAbstractBiMap_INCLUDE_ALL || ComGoogleCommonCollectAbstractBiMap_EntrySet_$1_1BiMapEntry_INCLUDE)
#define _ComGoogleCommonCollectAbstractBiMap_EntrySet_$1_1BiMapEntry_

#endif

#if !defined (_ComGoogleCommonCollectAbstractBiMap_Inverse_) && (ComGoogleCommonCollectAbstractBiMap_INCLUDE_ALL || ComGoogleCommonCollectAbstractBiMap_Inverse_INCLUDE)
#define _ComGoogleCommonCollectAbstractBiMap_Inverse_

#endif
#pragma pop_macro("ComGoogleCommonCollectAbstractBiMap_INCLUDE_ALL")
