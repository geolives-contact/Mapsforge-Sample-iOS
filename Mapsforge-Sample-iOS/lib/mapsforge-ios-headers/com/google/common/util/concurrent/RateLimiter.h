//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/cbrasseur/Documents/j2objc-0.9.7/guava/sources/com/google/common/util/concurrent/RateLimiter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE_ALL")
#if ComGoogleCommonUtilConcurrentRateLimiter_RESTRICT
#define ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE_ALL 0
#else
#define ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE_ALL 1
#endif
#undef ComGoogleCommonUtilConcurrentRateLimiter_RESTRICT

#if !defined (_ComGoogleCommonUtilConcurrentRateLimiter_) && (ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE_ALL || ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE)
#define _ComGoogleCommonUtilConcurrentRateLimiter_

@class ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker;
@class JavaUtilConcurrentTimeUnitEnum;

@interface ComGoogleCommonUtilConcurrentRateLimiter : NSObject {
 @public
  jdouble storedPermits_;
  jdouble maxPermits_;
  jdouble stableIntervalMicros_;
}

#pragma mark Public

- (void)acquire;

- (void)acquireWithInt:(jint)permits;

+ (ComGoogleCommonUtilConcurrentRateLimiter *)createWithDouble:(jdouble)permitsPerSecond;

+ (ComGoogleCommonUtilConcurrentRateLimiter *)createWithDouble:(jdouble)permitsPerSecond
                                                      withLong:(jlong)warmupPeriod
                            withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (jdouble)getRate;

- (void)setRateWithDouble:(jdouble)permitsPerSecond;

- (NSString *)description;

- (jboolean)tryAcquire;

- (jboolean)tryAcquireWithInt:(jint)permits;

- (jboolean)tryAcquireWithInt:(jint)permits
                     withLong:(jlong)timeout
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (jboolean)tryAcquireWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

#pragma mark Package-Private

+ (ComGoogleCommonUtilConcurrentRateLimiter *)createWithComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker:(ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker *)ticker
                                                                                                     withDouble:(jdouble)permitsPerSecond;

+ (ComGoogleCommonUtilConcurrentRateLimiter *)createWithComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker:(ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker *)ticker
                                                                                                     withDouble:(jdouble)permitsPerSecond
                                                                                                       withLong:(jlong)warmupPeriod
                                                                             withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)timeUnit;

+ (ComGoogleCommonUtilConcurrentRateLimiter *)createBurstyWithComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker:(ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker *)ticker
                                                                                                           withDouble:(jdouble)permitsPerSecond
                                                                                                              withInt:(jint)maxBurstSize;

- (void)doSetRateWithDouble:(jdouble)permitsPerSecond
                 withDouble:(jdouble)stableIntervalMicros;

- (jlong)storedPermitsToWaitTimeWithDouble:(jdouble)storedPermits
                                withDouble:(jdouble)permitsToTake;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentRateLimiter)

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentRateLimiter *ComGoogleCommonUtilConcurrentRateLimiter_createWithDouble_(jdouble permitsPerSecond);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentRateLimiter *ComGoogleCommonUtilConcurrentRateLimiter_createWithComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker_withDouble_(ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker *ticker, jdouble permitsPerSecond);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentRateLimiter *ComGoogleCommonUtilConcurrentRateLimiter_createWithDouble_withLong_withJavaUtilConcurrentTimeUnitEnum_(jdouble permitsPerSecond, jlong warmupPeriod, JavaUtilConcurrentTimeUnitEnum *unit);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentRateLimiter *ComGoogleCommonUtilConcurrentRateLimiter_createWithComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker_withDouble_withLong_withJavaUtilConcurrentTimeUnitEnum_(ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker *ticker, jdouble permitsPerSecond, jlong warmupPeriod, JavaUtilConcurrentTimeUnitEnum *timeUnit);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentRateLimiter *ComGoogleCommonUtilConcurrentRateLimiter_createBurstyWithComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker_withDouble_withInt_(ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker *ticker, jdouble permitsPerSecond, jint maxBurstSize);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentRateLimiter)

#endif

#if !defined (_ComGoogleCommonUtilConcurrentRateLimiter_WarmingUp_) && (ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE_ALL || ComGoogleCommonUtilConcurrentRateLimiter_WarmingUp_INCLUDE)
#define _ComGoogleCommonUtilConcurrentRateLimiter_WarmingUp_

#endif

#if !defined (_ComGoogleCommonUtilConcurrentRateLimiter_Bursty_) && (ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE_ALL || ComGoogleCommonUtilConcurrentRateLimiter_Bursty_INCLUDE)
#define _ComGoogleCommonUtilConcurrentRateLimiter_Bursty_

#endif

#if !defined (_ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker_) && (ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE_ALL || ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker_INCLUDE)
#define _ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker_

#define ComGoogleCommonBaseTicker_RESTRICT 1
#define ComGoogleCommonBaseTicker_INCLUDE 1
#include "com/google/common/base/Ticker.h"

@interface ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker : ComGoogleCommonBaseTicker

#pragma mark Package-Private

- (instancetype)init;

- (void)sleepMicrosUninterruptiblyWithLong:(jlong)micros;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker)

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker *ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker_SYSTEM_TICKER_;
J2OBJC_STATIC_FIELD_GETTER(ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker, SYSTEM_TICKER_, ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker *)

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker_init(ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker)

#endif

#if !defined (_ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker_$1_) && (ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE_ALL || ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker_$1_INCLUDE)
#define _ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker_$1_

#endif
#pragma pop_macro("ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE_ALL")
